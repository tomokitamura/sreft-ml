{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to sreft-ml What is SReFT-ML? SReFT-ML is a neural network-based method for constructing long-term disease progression models from short-term observational data. It updates the SReFT algorithm to a machine learning-based approach. For detailed information about the concept of SReFT, please refer to the original paper . How to use sreft-ml Required Data SReFT-ML uses time series data of multiple biomarkers. Each record consists of ID, time, and observed value of each biomarker, as shown in the table below. Please format the data beforehand, since the program is created assuming this format. Note that the column names must be ID for ID and TIME for time. ID TIME Biomarker 1 Biomarker 2 ... 1 0 0.1 0.5 ... 1 1 0.2 0.4 ... ... ... .. ... ... 100 5 1 2.4 ... Preprocessing Use utilities.split_data_for_sreftml to preprocess the data set prepared in the previous section for SReFT-ML. x, cov, m, y = utilities.split_data_for_sreftml( df, name_biomarkers, name_covariates, isMixedlm=isMixedlm ) Standardize the data if necessary. This is a fundamental and indispensable step since in many cases the scale differs between biomarkers. For the scaler, we assume scikit-learn's Scaler. Any Scaler may be used. Choose the one that best suits the nature of your data. But do not convert x. x is in pandas format, so please only convert it to numpy format. x_scaled = x.values.reshape(-1, 1) cov_scaled = scaler_cov.fit_transform(cov.values) m_scaled = scaler_m.fit_transform(m.values) y_scaled = scaler_y.fit_transform(y.values) Hyperparameter Search To search for hyperparameters, use sreftml_model.hp_search_for_sreftml to perform random search or grid search. Currently, only the items specified in grid_dict below can be targeted. The df_grid contains the results. The one with the best score should be used for model building. grid_dict = { \"adam_lr\": [1e-3, 1e-4, 1e-5], \"activation_model_1_mid\": [\"sigmoid\", \"tanh\"], \"activation_model_1_out\": [\"relu\", \"softplus\"], \"activation_model_y_mid\": [\"relu\", \"tanh\", \"linear\"], } df_grid = sreftml_model.hp_search_for_sreftml( df, (x_scaled, cov_scaled, m_scaled, y_scaled), grid_dict=grid_dict, n_grid_sample=0, n_splits=3, ) Model Building Split the data into a training set and a validation set set. This is supposed to be done for each ID, so we use sklearn.model_selection.GroupShuffleSplit . from sklearn.model_selection import GroupShuffleSplit ((train_idx, vali_idx),) = GroupShuffleSplit( 1, test_size=0.1, random_state=random_seed ).split(X=df, groups=df.ID) Build the model. Since sreftml_model.SReFT implements TensorFlow's Subclassing API, its usage conforms to it. sreft = sreftml_model.SReFT( output_dim=len(name_biomarkers), latent_dim_model_1=m_scaled.shape[1], latent_dim_model_y=y_scaled.shape[1], activation_model_1_mid=\"tanh\", activation_model_1_out=\"softplus\", activation_model_y_mid=\"tanh\", random_state=random_seed, ) sreft.compile(optimizer=keras.optimizers.Adam(1e-5)) sreft.fit( ( x_scaled[train_idx, :], cov_scaled[train_idx, :], m_scaled[train_idx, :], y_scaled[train_idx, :], ), y_scaled[train_idx, :], batch_size=256, validation_data=( ( x_scaled[vali_idx, :], cov_scaled[vali_idx, :], m_scaled[vali_idx, :], y_scaled[vali_idx, :], ), y_scaled[vali_idx, :], ), epochs=9999, verbose=0, ) Once you have built the model, calculate and save the predictions, etc. Use in plots. df = utilities.calculate_offsetT_prediction( sreft, df, (x_scaled, cov_scaled, m_scaled, y_scaled), scaler_y, name_biomarkers ) Creating Plots Various plotting functions are available. See help page for details.","title":"Welcome to sreft-ml"},{"location":"#welcome-to-sreft-ml","text":"","title":"Welcome to sreft-ml"},{"location":"#what-is-sreft-ml","text":"SReFT-ML is a neural network-based method for constructing long-term disease progression models from short-term observational data. It updates the SReFT algorithm to a machine learning-based approach. For detailed information about the concept of SReFT, please refer to the original paper .","title":"What is SReFT-ML?"},{"location":"#how-to-use-sreft-ml","text":"","title":"How to use sreft-ml"},{"location":"#required-data","text":"SReFT-ML uses time series data of multiple biomarkers. Each record consists of ID, time, and observed value of each biomarker, as shown in the table below. Please format the data beforehand, since the program is created assuming this format. Note that the column names must be ID for ID and TIME for time. ID TIME Biomarker 1 Biomarker 2 ... 1 0 0.1 0.5 ... 1 1 0.2 0.4 ... ... ... .. ... ... 100 5 1 2.4 ...","title":"Required Data"},{"location":"#preprocessing","text":"Use utilities.split_data_for_sreftml to preprocess the data set prepared in the previous section for SReFT-ML. x, cov, m, y = utilities.split_data_for_sreftml( df, name_biomarkers, name_covariates, isMixedlm=isMixedlm ) Standardize the data if necessary. This is a fundamental and indispensable step since in many cases the scale differs between biomarkers. For the scaler, we assume scikit-learn's Scaler. Any Scaler may be used. Choose the one that best suits the nature of your data. But do not convert x. x is in pandas format, so please only convert it to numpy format. x_scaled = x.values.reshape(-1, 1) cov_scaled = scaler_cov.fit_transform(cov.values) m_scaled = scaler_m.fit_transform(m.values) y_scaled = scaler_y.fit_transform(y.values)","title":"Preprocessing"},{"location":"#hyperparameter-search","text":"To search for hyperparameters, use sreftml_model.hp_search_for_sreftml to perform random search or grid search. Currently, only the items specified in grid_dict below can be targeted. The df_grid contains the results. The one with the best score should be used for model building. grid_dict = { \"adam_lr\": [1e-3, 1e-4, 1e-5], \"activation_model_1_mid\": [\"sigmoid\", \"tanh\"], \"activation_model_1_out\": [\"relu\", \"softplus\"], \"activation_model_y_mid\": [\"relu\", \"tanh\", \"linear\"], } df_grid = sreftml_model.hp_search_for_sreftml( df, (x_scaled, cov_scaled, m_scaled, y_scaled), grid_dict=grid_dict, n_grid_sample=0, n_splits=3, )","title":"Hyperparameter Search"},{"location":"#model-building","text":"Split the data into a training set and a validation set set. This is supposed to be done for each ID, so we use sklearn.model_selection.GroupShuffleSplit . from sklearn.model_selection import GroupShuffleSplit ((train_idx, vali_idx),) = GroupShuffleSplit( 1, test_size=0.1, random_state=random_seed ).split(X=df, groups=df.ID) Build the model. Since sreftml_model.SReFT implements TensorFlow's Subclassing API, its usage conforms to it. sreft = sreftml_model.SReFT( output_dim=len(name_biomarkers), latent_dim_model_1=m_scaled.shape[1], latent_dim_model_y=y_scaled.shape[1], activation_model_1_mid=\"tanh\", activation_model_1_out=\"softplus\", activation_model_y_mid=\"tanh\", random_state=random_seed, ) sreft.compile(optimizer=keras.optimizers.Adam(1e-5)) sreft.fit( ( x_scaled[train_idx, :], cov_scaled[train_idx, :], m_scaled[train_idx, :], y_scaled[train_idx, :], ), y_scaled[train_idx, :], batch_size=256, validation_data=( ( x_scaled[vali_idx, :], cov_scaled[vali_idx, :], m_scaled[vali_idx, :], y_scaled[vali_idx, :], ), y_scaled[vali_idx, :], ), epochs=9999, verbose=0, ) Once you have built the model, calculate and save the predictions, etc. Use in plots. df = utilities.calculate_offsetT_prediction( sreft, df, (x_scaled, cov_scaled, m_scaled, y_scaled), scaler_y, name_biomarkers )","title":"Model Building"},{"location":"#creating-plots","text":"Various plotting functions are available. See help page for details.","title":"Creating Plots"},{"location":"reference/","text":"Reference correlation_plot_strata ( df , name_biomarkers , strata = 'status' ) Generate a heatmap and pairplot of biomarkers for each strata. Parameters: df ( DataFrame ) \u2013 Dataframe with biomarkers and strata information. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names to plot. strata ( str , default: 'status' ) \u2013 The name of the strata column. Default is 'status'. Returns: None \u2013 None sreftml\\plots.py 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def correlation_plot_strata ( df : pd . DataFrame , name_biomarkers : list [ str ], strata : str = \"status\" ) -> None : \"\"\" Generate a heatmap and pairplot of biomarkers for each strata. Args: df (pd.DataFrame): Dataframe with biomarkers and strata information. name_biomarkers (list[str]): List of biomarker names to plot. strata (str, optional): The name of the strata column. Default is 'status'. Returns: None \"\"\" for i in range ( 2 ): plt . figure ( figsize = ( 10 , 10 )) sns . heatmap ( df [ df [ strata ] == i ][ name_biomarkers ] . corr (), cmap = \"coolwarm\" , vmin =- 1 , vmax = 1 , annot = True , fmt = \"1.2f\" , ) plt . figure ( figsize = ( 10 , 10 )) sns . pairplot ( df [ df [ strata ] == i ][ name_biomarkers ] . reset_index ( drop = True )) sns . pairplot ( df [ name_biomarkers + [ strata ]], hue = strata , diag_kind = \"hist\" ) return None get_regression_line_label ( x , y ) Generate a label for a line fitted to the given x and y data using linear regression. Parameters: x ( Series ) \u2013 Series of x-axis data. y ( Series ) \u2013 Series of y-axis data. Returns: str ( str ) \u2013 Label for the fitted line, including slope, intercept, and R-squared value. sreftml\\plots.py 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 def get_regression_line_label ( x : pd . Series , y : pd . Series ) -> str : \"\"\" Generate a label for a line fitted to the given x and y data using linear regression. Parameters: x (pd.Series): Series of x-axis data. y (pd.Series): Series of y-axis data. Returns: str: Label for the fitted line, including slope, intercept, and R-squared value. \"\"\" slope , intercept , r_value , p_value , std_err = linregress ( x , y ) label_line_1 = rf \"$y= { slope : .3f } x { '' if intercept < 0 else '+' }{ intercept : .3f } $\" label_line_2 = rf \"$R^2: { r_value ** 2 : .2f } $\" label_line = label_line_1 + \" \\n \" + label_line_2 return label_line histogram_plot ( df , col_name , hue = None , sharex = True , sharey = True , ncol_max = 4 , save_file_path = None ) Plot a stratified histogram by column. Parameters: df ( DataFrame ) \u2013 Input DataFrame. col_name ( list [ str ] | str ) \u2013 List of column names in df. hue ( str | None , default: None ) \u2013 Column to stratify the plot. Defaults to None. share{x, ( y} (bool | \"col\" | \"row\" ) \u2013 This is passed directly to seaborn.FacetGrid. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns. Defaults to 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: FacetGrid \u2013 sns.axisgrid.FacetGrid: FacetGrid object with the distribution plot. sreftml\\plots.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def histogram_plot ( df : pd . DataFrame , col_name : list [ str ] | str , hue : str | None = None , sharex : bool = True , sharey : bool = True , ncol_max : int = 4 , save_file_path : str | None = None , ) -> sns . axisgrid . FacetGrid : \"\"\" Plot a stratified histogram by column. Args: df (pd.DataFrame): Input DataFrame. col_name (list[str] | str): List of column names in df. hue (str | None, optional): Column to stratify the plot. Defaults to None. share{x, y} (bool | \"col\" | \"row\", optional): This is passed directly to seaborn.FacetGrid. ncol_max (int, optional): Maximum number of columns. Defaults to 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.FacetGrid: FacetGrid object with the distribution plot. \"\"\" if type ( col_name ) is str : col_name = [ col_name ] col_wrap = n2mfrow ( len ( col_name ), ncol_max = ncol_max )[ 1 ] if hue is None : df_melt = pd . melt ( df [ col_name ]) else : df_melt = pd . melt ( df [ col_name + [ hue ]], hue ) g = sns . FacetGrid ( df_melt , col = \"variable\" , hue = hue , col_wrap = col_wrap , sharex = sharex , sharey = sharey , height = 3.5 , ) g . map ( plt . hist , \"value\" , alpha = 0.4 ) g . add_legend () g . set_titles ( \" {col_name} \" ) if save_file_path : g . savefig ( save_file_path , transparent = True ) return g hp_search_plot ( df_grid , eval_col = 'score' , save_file_path = None ) Plot the results of hyperparameters search. Parameters: df_grid ( DataFrame ) \u2013 DataFrame containing the grid of hyperparameters. eval_col ( str , default: 'score' ) \u2013 The column to use for evaluation. Defaults to \"score\". save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def hp_search_plot ( df_grid : pd . DataFrame , eval_col : str = \"score\" , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Plot the results of hyperparameters search. Args: df_grid (pd.DataFrame): DataFrame containing the grid of hyperparameters. eval_col (str, optional): The column to use for evaluation. Defaults to \"score\". save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" df_grid = df_grid . sort_values ( eval_col , ascending = False ) . reset_index ( drop = True ) cols = df_grid . columns . tolist () cols . remove ( eval_col ) cols . append ( eval_col ) df_grid_sorted = df_grid [ cols ] string_columns = df_grid_sorted . select_dtypes ( include = \"object\" ) . columns numeric_columns = df_grid_sorted . select_dtypes ( exclude = \"object\" ) . columns for i in string_columns : df_grid_sorted [ i ] = sp . LabelEncoder () . fit_transform ( df_grid_sorted [ i ]) scaler = sp . MinMaxScaler () df_grid_scaled = pd . DataFrame ( scaler . fit_transform ( df_grid_sorted ), columns = df_grid_sorted . columns ) cm = plt . get_cmap ( \"seismic\" , 2 ) fig = plt . figure ( tight_layout = True , dpi = 300 ) for i , row in df_grid_scaled . iterrows (): if i == len ( df_grid_sorted ) - 1 : plt . plot ( df_grid_scaled . columns , row . values , color = cm ( 1 ), lw = 4 ) else : plt . plot ( df_grid_scaled . columns , row . values , color = cm ( 0 )) for i in string_columns : label_unique = df_grid [ i ] . unique () scaled_unique = df_grid_scaled [ i ] . unique () for label_ , scaled_ in zip ( label_unique , scaled_unique ): plt . text ( i , scaled_ , label_ , ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" ) for i in numeric_columns : min_val = df_grid_sorted [ i ] . min () max_val = df_grid_sorted [ i ] . max () plt . text ( i , 0 , min_val , ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" ) if min_val != max_val : plt . text ( i , 1 , max_val , ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" ) for i , val in enumerate ( df_grid_scaled . iloc [ - 1 , :]): col_name = df_grid_scaled . columns [ i ] if val not in [ 0 , 1 ] and col_name in numeric_columns : plt . text ( col_name , val , df_grid_sorted . iloc [ - 1 , i ], ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" , ) plt . xticks ( rotation = 45 ) plt . ylabel ( \"Min-Max Normalized value\" ) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True ) return fig learning_history_plot ( df_loss , save_file_path = None ) Plot learning history. Parameters: df_loss ( DataFrame ) \u2013 Data frame converted from tf.keras.callbacks.History. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 def learning_history_plot ( df_loss : pd . DataFrame , save_file_path : str | None = None ) -> plt . Figure : \"\"\" Plot learning history. Args: df_loss (pd.DataFrame): Data frame converted from tf.keras.callbacks.History. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" fig = plt . figure ( tight_layout = True , dpi = 300 ) plt . plot ( df_loss [ \"loss\" ], label = \"training\" ) plt . plot ( df_loss [ \"val_loss\" ], label = \"validation\" ) plt . xlabel ( \"Epoch\" ) plt . ylabel ( \"loss\" ) plt . legend () if save_file_path is not None : plt . savefig ( save_file_path , transparent = True ) return fig model_sigmoid ( t , cov , params ) Compute a sigmoid model prediction. Parameters: t ( float | np.ndarray] ) \u2013 Time or array of time values. cov ( float | np.ndarray] ) \u2013 Covariate or array of covariate values. params ( Series ) \u2013 Parameters for the model. Returns: ndarray \u2013 np.ndarray: The model predictions. sreftml\\plots.py 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 def model_sigmoid ( t : float | np . ndarray , cov : float | np . ndarray , params : pd . Series ) -> np . ndarray : \"\"\" Compute a sigmoid model prediction. Args: t (float | np.ndarray]): Time or array of time values. cov (float | np.ndarray]): Covariate or array of covariate values. params (np.Series): Parameters for the model. Returns: np.ndarray: The model predictions. \"\"\" covval = np . exp ( params . filter ( like = \"Covariate\" )) . values . reshape ( 1 , - 1 ) ** cov covval = np . prod ( covval , axis = 1 ) li = params [ \"a\" ] + params [ \"b\" ] * covval * t output = 1 / ( 1 + np . exp ( - li )) return output multi_panel_scatter_plot ( df , x_col , y_col , hue , duplicate_key = None , ncol_max = 4 , density = False , identity = False , save_file_path = None ) Draw scatter plots with multiple panels based on stratification factors. Parameters: df ( DataFrame ) \u2013 Input DataFrame. x_col ( str ) \u2013 X-axis column in df. y_col ( str ) \u2013 Y-axis column in df. hue ( list [ str ] | str ) \u2013 Columns to stratify the plot. duplicate_key ( list [ str ] | str | None , default: None ) \u2013 Specify the column name(s) from which duplicates are to be removed. Defaults to None. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns. Defaults to 4. density ( bool , default: False ) \u2013 Whether to plot density. Defaults to False. identity ( bool , default: False ) \u2013 Whether to plot identity line. Defaults to False. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: FacetGrid \u2013 sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. sreftml\\plots.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 def multi_panel_scatter_plot ( df : pd . DataFrame , x_col : str , y_col : str , hue : list [ str ] | str , duplicate_key : list [ str ] | str | None = None , ncol_max : int = 4 , density : bool = False , identity : bool = False , save_file_path : str | None = None , ) -> sns . axisgrid . FacetGrid : \"\"\" Draw scatter plots with multiple panels based on stratification factors. Args: df (pd.DataFrame): Input DataFrame. x_col (str): X-axis column in df. y_col (str): Y-axis column in df. hue (list[str] | str): Columns to stratify the plot. duplicate_key (list[str] | str | None, optional): Specify the column name(s) from which duplicates are to be removed. Defaults to None. ncol_max (int, optional): Maximum number of columns. Defaults to 4. density (bool, optional): Whether to plot density. Defaults to False. identity (bool, optional): Whether to plot identity line. Defaults to False. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. \"\"\" if type ( hue ) is str : hue = [ hue ] df_ = clean_duplicate ( df , [ x_col , y_col ] + hue , duplicate_key ) hue_ = \", \" . join ( hue ) if len ( hue ) > 1 : df_ [ hue_ ] = df [ hue ] . apply ( lambda x : \", \" . join ( x . astype ( str )), axis = 1 ) unique_hue = np . sort ( df_ [ hue_ ] . unique ()) col_wrap = n2mfrow ( len ( df_ [ hue_ ] . unique ()), ncol_max = ncol_max )[ 1 ] g = sns . lmplot ( data = df_ , x = x_col , y = y_col , col = hue_ , col_wrap = col_wrap , col_order = unique_hue , scatter = not density , scatter_kws = { \"alpha\" : 0.5 , \"s\" : 20 , \"edgecolor\" : \"none\" }, line_kws = { \"color\" : \"red\" , \"label\" : \"lines\" }, ) g . figure . set_dpi ( 300 ) for idx , s in enumerate ( unique_hue ): df_hue = df_ . loc [ df_ [ hue_ ] == s ] label_line = get_regression_line_label ( df_hue [ x_col ], df_hue [ y_col ]) if density : xy = df_hue [[ x_col , y_col ]] . values . T z = gaussian_kde ( xy )( xy ) x_ = xy . T [:, : 1 ] y_ = xy . T [:, 1 :] g . axes [ idx ] . scatter ( x_ , y_ , c = z , s = 20 , edgecolor = \"none\" , cmap = \"viridis\" ) g . axes [ idx ] . legend ([ label_line ]) else : g . axes [ idx ] . legend ([ \"_nolegend_\" , label_line ]) if identity : if df [ y_col ] . max () < df [ x_col ] . min () or df [ x_col ] . max () < df [ y_col ] . min (): warnings . warn ( f \"The data range of { x_col } and { y_col } is not covered, although idenntity=True. Skip drawing of identity line.\" ) else : min_ = df [[ x_col , y_col ]] . min () . max () max_ = df [[ x_col , y_col ]] . max () . min () g . axes [ idx ] . plot ([ min_ , max_ ], [ min_ , max_ ], \"k--\" ) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True , dpi = 300 ) return g permutation_importance_plot ( mean_pi , std_pi , feature_label , y_axis_log = False , save_file_path = None ) Generate a permutation importance plot. Parameters: mean_pi ( ndarray ) \u2013 Array of mean permutation importance values. std_pi ( ndarray ) \u2013 Array of standard deviation permutation importance values. feature_label ( list [ str ] ) \u2013 List of feature names for which PI was measured. y_axis_log ( bool , default: False ) \u2013 Whether to use log scale for y-axis. Default is False. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 def permutation_importance_plot ( mean_pi : np . ndarray , std_pi : np . ndarray , feature_label : list [ str ], y_axis_log : bool = False , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a permutation importance plot. Args: mean_pi (np.ndarray): Array of mean permutation importance values. std_pi (np.ndarray): Array of standard deviation permutation importance values. feature_label (list[str]): List of feature names for which PI was measured. y_axis_log (bool, optional): Whether to use log scale for y-axis. Default is False. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" rank = np . argsort ( mean_pi ) fig = plt . figure ( figsize = ( len ( rank ) / 4 , 10 ), dpi = 300 , tight_layout = True ) plt . bar ([ feature_label [ i ] for i in rank ], mean_pi [ rank ], yerr = std_pi [ rank ]) plt . xticks ( rotation = 45 , ha = \"right\" ) if y_axis_log : plt . ylabel ( \"Permutation Importance (log scale)\" ) plt . yscale ( \"log\" ) else : plt . ylabel ( \"Permutation Importance\" ) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True ) return fig prediction_plot ( sreft , df , name_biomarkers , name_covariates , scaler_y , scaler_cov , res = 100 , density = False , useOffsetT = True , ncol_max = 4 , save_file_path = None ) Plot the predictions of the SReFT model. Parameters: sreft ( Model ) \u2013 The SReFT model. df ( DataFrame ) \u2013 DataFrame with the data. name_biomarkers ( list [ str ] ) \u2013 The names of the biomarkers. name_covariates ( list [ str ] ) \u2013 The names of the covariates. scaler_y ( StandardScaler ) \u2013 The scaler for the y values. scaler_cov ( StandardScaler ) \u2013 The scaler for the covariate values. res ( int , default: 100 ) \u2013 Resolution of the plot. Defaults to 100. density ( bool , default: False ) \u2013 Whether to plot density or not. Defaults to False. useOffsetT ( bool , default: True ) \u2013 Whether to use offsetT or not. Defaults to True. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns for subplots. Defaults to 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 def prediction_plot ( sreft : tf . keras . Model , df : pd . DataFrame , name_biomarkers : list [ str ], name_covariates : list [ str ], scaler_y : sp . StandardScaler , scaler_cov : sp . StandardScaler , res : int = 100 , density : bool = False , useOffsetT : bool = True , ncol_max : int = 4 , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Plot the predictions of the SReFT model. Args: sreft (tf.keras.Model): The SReFT model. df (pd.DataFrame): DataFrame with the data. name_biomarkers (list[str]): The names of the biomarkers. name_covariates (list[str]): The names of the covariates. scaler_y (sp.StandardScaler): The scaler for the y values. scaler_cov (sp.StandardScaler): The scaler for the covariate values. res (int, optional): Resolution of the plot. Defaults to 100. density (bool, optional): Whether to plot density or not. Defaults to False. useOffsetT (bool, optional): Whether to use offsetT or not. Defaults to True. ncol_max (int, optional): Maximum number of columns for subplots. Defaults to 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" n_biomarker = len ( name_biomarkers ) n_covariate = len ( name_covariates ) n_row , n_col = n2mfrow ( n_biomarker , ncol_max ) cm = plt . colormaps [ \"Set1\" ] y_data = df [ name_biomarkers ] . values if useOffsetT : x_data = df . TIME . values + df . offsetT . values cov_dummy = np . array ([ i for i in itertools . product ([ 0 , 1 ], repeat = n_covariate )]) cov_dummy = np . repeat ( cov_dummy , res , axis = 0 ) cov_dummy_scaled = scaler_cov . transform ( cov_dummy ) x_model = np . linspace ( x_data . min (), x_data . max (), res ) x_model = np . tile ( x_model , 2 ** n_covariate ) . reshape ( - 1 , 1 ) x_model = np . concatenate (( x_model , cov_dummy_scaled ), axis = 1 ) y_model = scaler_y . inverse_transform ( sreft . model_y ( x_model )) else : x_data = df . TIME . values fig , axs = plt . subplots ( n_row , n_col , figsize = ( n_col * 3 , n_row * 3 ), tight_layout = True , dpi = 300 , sharex = \"row\" , ) for k , ax in enumerate ( axs . flat ): if k >= n_biomarker : ax . axis ( \"off\" ) continue if density : x_ = x_data [ ~ np . isnan ( y_data [:, k ])] y_ = y_data [ ~ np . isnan ( y_data [:, k ]), k ] if np . var ( x_ ) == 0 : z = gaussian_kde ( y_ )( y_ ) else : xy = np . vstack ([ x_ , y_ ]) z = gaussian_kde ( xy )( xy ) idx = z . argsort () ax . scatter ( x_ [ idx ], y_ [ idx ], c = z [ idx ], s = 2 , label = \"_nolegend_\" ) else : ax . scatter ( x_data , y_data [:, k ], c = \"silver\" , s = 2 , label = \"_nolegend_\" ) if useOffsetT : for i in range ( 2 ** n_covariate ): ax . plot ( x_model [ res * i : res * ( i + 1 ), 0 ], y_model [ res * i : res * ( i + 1 ), k ], c = cm ( i ), lw = 4 , ) ax . set_xlabel ( \"Disease Time (year)\" ) else : ax . set_xlabel ( \"Observation Period (year)\" ) ax . set_title ( name_biomarkers [ k ], fontsize = 15 ) if n_covariate > 0 : legend_labels = [ \", \" . join ( format ( i , f \"0 { n_covariate } b\" )) for i in range ( 2 ** n_covariate ) ] fig . legend ( loc = \"center\" , framealpha = 0 , bbox_to_anchor = ( 1.1 , 0.5 ), ncol = 1 , title = \", \" . join ( name_covariates ), labels = legend_labels , ) if save_file_path is not None : fig . savefig ( save_file_path , transparent = True , bbox_inches = \"tight\" ) return fig prediction_sim_plot ( df , sreft , params_true , name_biomarkers , name_covariates , scaler_cov , scaler_y , res = 100 , density = False , ncol_max = 4 , save_file_path = None ) Generate a prediction simulation plot. Parameters: df ( DataFrame ) \u2013 Dataframe with biomarkers and other information. sreft ( Model ) \u2013 Object responsible for transforming the data. params_true ( DataFrame ) \u2013 Dataframe with true parameters for the model. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. name_covariates ( list [ str ] ) \u2013 List of covariate names. scaler_cov ( StandardScaler ) \u2013 Scaler for the covariate values. scaler_y ( StandardScaler ) \u2013 Scaler for the y values. res ( int , default: 100 ) \u2013 Resolution for the plot. Default is 100. density ( bool , default: False ) \u2013 Whether to use density or not. Default is False. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns for the plot. Default is 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure ( Figure ) \u2013 The created matplotlib figure. sreftml\\plots.py 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 def prediction_sim_plot ( df : pd . DataFrame , sreft : tf . keras . Model , params_true : pd . DataFrame , name_biomarkers : list [ str ], name_covariates : list [ str ], scaler_cov : sp . StandardScaler , scaler_y : sp . StandardScaler , res : int = 100 , density : bool = False , ncol_max : int = 4 , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a prediction simulation plot. Args: df (pd.DataFrame): Dataframe with biomarkers and other information. sreft (tf.keras.Model): Object responsible for transforming the data. params_true (pd.DataFrame): Dataframe with true parameters for the model. name_biomarkers (list[str]): List of biomarker names. name_covariates (list[str]): List of covariate names. scaler_cov: Scaler for the covariate values. scaler_y: Scaler for the y values. res (int, optional): Resolution for the plot. Default is 100. density (bool, optional): Whether to use density or not. Default is False. ncol_max (int, optional): Maximum number of columns for the plot. Default is 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: Figure: The created matplotlib figure. \"\"\" n_biomarker = len ( name_biomarkers ) n_covariate = len ( name_covariates ) n_row , n_col = n2mfrow ( n_biomarker , ncol_max ) cm = plt . colormaps [ \"Set1\" ] y_data = df [ name_biomarkers ] . values x_data = df . TIME . values + df . offsetT . values cov_dummy = np . array ( list ( itertools . product ([ 0 , 1 ], repeat = n_covariate ))) cov_dummy = np . repeat ( cov_dummy , res , axis = 0 ) cov_dummy_scaled = scaler_cov . transform ( cov_dummy ) x_model = np . linspace ( x_data . min (), x_data . max (), res ) input2 = np . tile ( x_model , 2 ** n_covariate ) . reshape ( - 1 , 1 ) input2 = np . concatenate (( input2 , cov_dummy_scaled ), axis = 1 ) y_model = scaler_y . inverse_transform ( sreft . model_y ( input2 )) name_covariates_true = [ i for i in params_true . columns if \"Covariate\" in i ] n_covariate_true = len ( name_covariates_true ) cov_dummy_true = np . array ( list ( itertools . product ([ 0 , 1 ], repeat = n_covariate_true ))) cov_dummy_true = np . repeat ( cov_dummy_true , res , axis = 0 ) fig , axs = plt . subplots ( n_row , n_col , figsize = ( n_col * 3 , n_row * 3 ), tight_layout = True , dpi = 300 , sharex = \"row\" , ) for k , ax in enumerate ( axs . flat ): if k >= n_biomarker : ax . axis ( \"off\" ) continue if density : x_ = x_data [ ~ np . isnan ( y_data [:, k ])] y_ = y_data [ ~ np . isnan ( y_data [:, k ]), k ] if np . var ( x_ ) == 0 : z = gaussian_kde ( y_ )( y_ ) else : xy = np . vstack ([ x_ , y_ ]) z = gaussian_kde ( xy )( xy ) idx = z . argsort () ax . scatter ( x_ [ idx ], y_ [ idx ], c = z [ idx ], s = 2 , label = \"_nolegend_\" ) else : ax . scatter ( x_data , y_data [:, k ], c = \"silver\" , s = 2 , label = \"_nolegend_\" ) pred_line = [] for i in range ( 2 ** n_covariate ): pred_line . extend ( ax . plot ( x_model , y_model [ res * i : ( res * i + res ), k ], c = cm ( i ), lw = 3 , ) ) true_line = [] for i in range ( 2 ** n_covariate_true ): y_true = model_sigmoid ( x_model , cov_dummy_true [ res * i : ( res * i + res )], params_true . loc [ k ], ) true_line . extend ( ax . plot ( x_model , y_true , c = cm ( i ), lw = 3 , ls = \"dashed\" , ) ) ax . set_xlabel ( \"Disease Time (year)\" ) ax . set_title ( name_biomarkers [ k ], fontsize = 15 ) if n_covariate > 0 : legend_labels = [ \", \" . join ( format ( i , f \"0 { n_covariate } b\" )) for i in range ( 2 ** n_covariate ) ] fig . legend ( handles = pred_line , loc = \"center\" , framealpha = 0 , bbox_to_anchor = ( 1.1 , 0.7 ), title = \"Pred \\n \" + \", \" . join ( name_covariates ), labels = legend_labels , ) legend_labels_true = [ \", \" . join ( format ( i , f \"0 { n_covariate_true } b\" )) for i in range ( 2 ** n_covariate_true ) ] fig . legend ( handles = true_line , loc = \"center\" , framealpha = 0 , bbox_to_anchor = ( 1.1 , 0.3 ), title = \"True \\n \" + \", \" . join ( name_covariates_true ), labels = legend_labels_true , ) if save_file_path : fig . savefig ( save_file_path , transparent = True , bbox_inches = \"tight\" ) return fig residual_plot ( df , name_biomarkers , ncol_max = 4 , save_file_path = None ) Generate a plot of residuals. Parameters: df ( DataFrame ) \u2013 Input Dataframe. This must contain offsetT, actual value of biomarkers and prediction value of biomarkers. name_biomarkers ( List [ str ] ) \u2013 List of biomarker names. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns. Default is 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure ( Figure ) \u2013 The created matplotlib figure. sreftml\\plots.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 def residual_plot ( df : pd . DataFrame , name_biomarkers : list [ str ], ncol_max : int = 4 , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a plot of residuals. Args: df (pd.DataFrame): Input Dataframe. This must contain offsetT, actual value of biomarkers and prediction value of biomarkers. name_biomarkers (List[str]): List of biomarker names. ncol_max (int, optional): Maximum number of columns. Default is 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: Figure: The created matplotlib figure. \"\"\" if not \"offsetT\" in df . columns : warnings . warn ( \"offsetT does not exist in df. df must contain offsetT. Skip drawing residual plot.\" ) return None if not all ([ f \" { biomarker } _pred\" in df . columns for biomarker in name_biomarkers ]): warnings . warn ( \"Some of the prediction values are missing in df. df must contain prediction values of biomarkers. Skip drawing residual plot.\" ) return None n_biomarker = len ( name_biomarkers ) n_row , n_col = n2mfrow ( n_biomarker , ncol_max ) x_data = df . TIME . values + df . offsetT . values y_res = ( df [[ f \" { biomarker } _pred\" for biomarker in name_biomarkers ]] . values - df [ name_biomarkers ] . values ) fig , axs = plt . subplots ( n_row , n_col , figsize = ( n_col * 3 , n_row * 3 ), tight_layout = True , dpi = 300 ) for k , ax in enumerate ( axs . flat ): if k >= n_biomarker : ax . axis ( \"off\" ) continue ax . scatter ( x_data , y_res [:, k ], s = 2 ) ax . axhline ( 0 , c = \"black\" , ls = \"--\" ) ax . set_title ( name_biomarkers [ k ], fontsize = 15 ) ax . set_xlabel ( \"Disease Time (year)\" ) ax . set_ylabel ( \"y_pred - y_obs\" ) if save_file_path is not None : fig . savefig ( save_file_path , transparent = True ) return fig scatter_matrix_plot ( df , save_file_path = None ) Plot correlation matrix. Parameters: df ( DataFrame ) \u2013 Input DataFrame. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: PairGrid \u2013 sns.axisgrid.PairGrid: PairGrid object with the correlation plot. sreftml\\plots.py 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 def scatter_matrix_plot ( df : pd . DataFrame , save_file_path : str | None = None ) -> sns . axisgrid . PairGrid : \"\"\" Plot correlation matrix. Args: df (pd.DataFrame): Input DataFrame. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.PairGrid: PairGrid object with the correlation plot. \"\"\" def corrfunc ( x , y , ** kwds ): ax = plt . gca () ax . tick_params ( bottom = False , top = False , left = False , right = False ) sns . despine ( ax = ax , bottom = True , top = True , left = True , right = True ) r = x . corr ( y , method = \"pearson\" ) norm = plt . Normalize ( - 1 , 1 ) facecolor = plt . get_cmap ( \"seismic\" )( norm ( r )) ax . set_facecolor ( facecolor ) ax . set_alpha ( 0 ) lightness = ( max ( facecolor [: 3 ]) + min ( facecolor [: 3 ])) / 2 ax . annotate ( f \" { r : .2f } \" , xy = ( 0.5 , 0.5 ), xycoords = ax . transAxes , color = \"white\" if lightness < 0.7 else \"black\" , size = 26 , ha = \"center\" , va = \"center\" , ) g = sns . PairGrid ( df ) g . map_diag ( sns . histplot , kde = False ) g . map_lower ( plt . scatter , s = 2 ) g . map_upper ( corrfunc ) g . figure . tight_layout () if save_file_path : g . savefig ( save_file_path ) return g single_panel_scatter_plot ( df , x_col , y_col , hue = None , duplicate_key = None , density = False , identity = False , save_file_path = None ) Draw a scatter plot using a single panel. Parameters: df ( DataFrame ) \u2013 Input DataFrame. x_col ( str ) \u2013 X-axis column in df. y_col ( str ) \u2013 Y-axis column in df. hue ( str | None , default: None ) \u2013 Column to stratify the plot. Defaults to None. duplicate_key ( list [ str ] | str | None , default: None ) \u2013 Specify the column name(s) from which duplicates are to be removed. Defaults to None. density ( bool , default: False ) \u2013 Whether to plot density. Defaults to False. identity ( bool , default: False ) \u2013 Whether to plot identity line. Defaults to False. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: FacetGrid \u2013 sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. sreftml\\plots.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 def single_panel_scatter_plot ( df : pd . DataFrame , x_col : str , y_col : str , hue : str | None = None , duplicate_key : list [ str ] | str | None = None , density : bool = False , identity : bool = False , save_file_path : str | None = None , ) -> sns . axisgrid . FacetGrid : \"\"\" Draw a scatter plot using a single panel. Args: df (pd.DataFrame): Input DataFrame. x_col (str): X-axis column in df. y_col (str): Y-axis column in df. hue (str | None, optional): Column to stratify the plot. Defaults to None. duplicate_key (list[str] | str | None, optional): Specify the column name(s) from which duplicates are to be removed. Defaults to None. density (bool, optional): Whether to plot density. Defaults to False. identity (bool, optional): Whether to plot identity line. Defaults to False. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. \"\"\" if density : hue = None warnings . warn ( \"Since density is True, the hue option is ignored.\" ) if hue : df_ = clean_duplicate ( df , [ x_col , y_col , hue ], duplicate_key ) unique_hues = np . sort ( df_ [ hue ] . unique ()) line_kws_ = None else : df_ = clean_duplicate ( df , [ x_col , y_col ], duplicate_key ) unique_hues = [ None ] line_kws_ = { \"color\" : \"red\" } scatter_kws_ = { \"alpha\" : 0.5 , \"s\" : 20 , \"edgecolor\" : \"none\" } if density : xy = df_ [[ x_col , y_col ]] . values . T z = gaussian_kde ( xy )( xy ) scatter_kws_ . update ({ \"c\" : z , \"color\" : None , \"cmap\" : \"viridis\" }) g = sns . lmplot ( data = df_ , x = x_col , y = y_col , hue = hue , hue_order = unique_hues , scatter_kws = scatter_kws_ , line_kws = line_kws_ , ) g . figure . set_dpi ( 300 ) if identity : if df [ y_col ] . max () < df [ x_col ] . min () or df [ x_col ] . max () < df [ y_col ] . min (): warnings . warn ( f \"The data range of { x_col } and { y_col } is not covered, although idenntity=True. Skip drawing of identity line.\" ) else : min_ = df [[ x_col , y_col ]] . min () . max () max_ = df [[ x_col , y_col ]] . max () . min () g . axes [ 0 , 0 ] . plot ([ min_ , max_ ], [ min_ , max_ ], \"k--\" ) if hue : g . axes [ 0 , 0 ] . legend ( [ \"_nolegend_\" , \"dummy text\" , \"_nolegned_\" ] * len ( unique_hues ) ) for idx , h in enumerate ( unique_hues ): df_hue = df_ . loc [ df_ [ hue ] == h ] label_line = get_regression_line_label ( df_hue [ x_col ], df_hue [ y_col ]) g . axes [ 0 , 0 ] . get_legend () . get_texts ()[ idx ] . set_text ( label_line ) else : label_line = get_regression_line_label ( df_ [ x_col ], df_ [ y_col ]) g . axes [ 0 , 0 ] . legend ( labels = [ \"_nolegend_\" , label_line ]) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True , dpi = 300 ) return g var_y_plot ( sreft , name_biomarkers , save_file_path = None ) Generate a plot of var_y. Parameters: sreft ( Model ) \u2013 Object responsible for transforming the data. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 def var_y_plot ( sreft : tf . keras . Model , name_biomarkers : list [ str ], save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a plot of var_y. Args: sreft (tf.keras.Model): Object responsible for transforming the data. name_biomarkers (list[str]): List of biomarker names. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" rank = np . argsort ( np . exp ( sreft . lnvar_y )) fig = plt . figure ( dpi = 300 , tight_layout = True ) plt . barh ([ name_biomarkers [ i ] for i in rank ], np . exp ( sreft . lnvar_y )[ rank ]) plt . gca () . invert_yaxis () plt . xlabel ( \"var_y\" ) if save_file_path : plt . savefig ( save_file_path , transparent = True ) return fig SReFT Bases: Model A model class that extends tf.keras.Model for SReFT_ML. Attributes: activation ( str ) \u2013 The activation function to use. activation_offsetT ( str ) \u2013 The activation function for offsetT. output_dim ( int ) \u2013 The dimension of the output. latent_dim ( int ) \u2013 The dimension of the latent variable. offsetT_min ( float ) \u2013 The minimum value of offsetT. offsetT_max ( float ) \u2013 The maximum value of offsetT. lnvar_y ( Variable ) \u2013 The lnvar_y variable. model_1 ( Sequential ) \u2013 A keras model for estimating offsetT. model_y ( Sequential ) \u2013 A keras model for estimating prediction. Source code in sreftml\\sreftml_model.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 class SReFT ( tf . keras . Model ): \"\"\" A model class that extends tf.keras.Model for SReFT_ML. Attributes: activation (str): The activation function to use. activation_offsetT (str): The activation function for offsetT. output_dim (int): The dimension of the output. latent_dim (int): The dimension of the latent variable. offsetT_min (float): The minimum value of offsetT. offsetT_max (float): The maximum value of offsetT. lnvar_y (tf.Variable): The lnvar_y variable. model_1 (tf.keras.Sequential): A keras model for estimating offsetT. model_y (tf.keras.Sequential): A keras model for estimating prediction. \"\"\" def __init__ ( self , output_dim : int , latent_dim_model_1 : int , latent_dim_model_y : int , activation_model_1_mid : str = \"sigmoid\" , activation_model_1_out : str = \"softplus\" , activation_model_y_mid : str = \"tanh\" , offsetT_min : float = - np . inf , offsetT_max : float = np . inf , random_state : int | None = None , ) -> None : \"\"\" Initialize a new instance of SReFT_ML. Args: output_dim (int, optional): The dimension of the output. Defaults to 4. latent_dim_model_1 (int): The dimension of the latent dimention of model_1. latent_dim_model_1 (int): The dimension of the latent dimention of model_y. activation_model_1_mid (str, optional): The activation function to use. Defaults to \"sigmoid\". activation_model_1_out (str, optional): The activation function to use. Defaults to \"softplus\". activation_model_y_mid (str, optional): The activation function to use. Defaults to \"tanh\". offsetT_min (float, optional): The minimum value of offsetT. Defaults to -np.inf. offsetT_max (float, optional): The maximum value of offsetT. Defaults to np.inf. random_state (int | None, optional): The seed for random number generation. Defaults to None. \"\"\" super ( SReFT , self ) . __init__ () initializer = tf . keras . initializers . GlorotUniform ( seed = random_state ) tf . random . set_seed ( random_state ) self . output_dim = int ( output_dim ) self . latent_dim_model_1 = int ( latent_dim_model_1 ) self . latent_dim_model_y = int ( latent_dim_model_y ) self . activation_model_1_mid = activation_model_1_mid self . activation_model_1_out = activation_model_1_out self . activation_model_y_mid = activation_model_y_mid self . offsetT_min = offsetT_min self . offsetT_max = offsetT_max self . lnvar_y = tf . Variable ( tf . zeros ( self . output_dim )) self . model_1 = tf . keras . Sequential ( name = \"estimate_offsetT\" ) self . model_1 . add ( tf . keras . layers . Dense ( self . latent_dim_model_1 , activation = self . activation_model_1_mid , kernel_initializer = initializer , ) ) self . model_1 . add ( tf . keras . layers . Dense ( 1 , activation = self . activation_model_1_out , kernel_initializer = initializer , ) ) self . model_y = tf . keras . Sequential ( name = \"estimate_prediction\" ) self . model_y . add ( tf . keras . layers . Dense ( self . latent_dim_model_y , activation = self . activation_model_y_mid , kernel_initializer = initializer , ) ) self . model_y . add ( tf . keras . layers . Dense ( self . output_dim , activation = None , kernel_initializer = initializer ) ) def call ( self , inputs : tuple [ np . ndarray , np . ndarray , np . ndarray , np . ndarray ], training : bool = False , ** kwargs , ) -> tf . Tensor : \"\"\" Call the model with the given inputs. Args: inputs (tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]): The inputs for the model. training (bool, optional): Whether the model is in training mode. Defaults to False. Returns: tf.Tensor: The predicted y values. :param **kwargs: \"\"\" ( input_x , input_cov , input_m , input_y ) = inputs input1 = tf . concat (( input_m , input_cov ), axis =- 1 , name = \"concat\" ) offset = self . model_1 ( input1 , training = training ) offset = tf . clip_by_value ( offset , self . offsetT_min , self . offsetT_max , name = \"clip\" ) dis_time = tf . add ( input_x , offset , name = \"add\" ) input2 = tf . concat (( dis_time , input_cov ), axis =- 1 , name = \"concat\" ) y_pred = self . model_y ( input2 , training = training ) obj = utilities . tf_compute_negative_log_likelihood ( input_y , y_pred , self . lnvar_y ) self . add_loss ( tf . reduce_sum ( obj )) self . add_metric ( tf . reduce_mean ( obj ), name = \"loss\" ) return y_pred def build_graph ( self , shapes : tuple [ int , int , int , int ]) -> tf . keras . Model : \"\"\" Build the computational graph for the model. Args: shapes (tuple[int, int, int, int]): The shapes of the inputs. Returns: tf.keras.Model: The model with the built computational graph. \"\"\" input_x = tf . keras . layers . Input ( shape = shapes [ 0 ], name = \"time\" ) input_cov = tf . keras . layers . Input ( shape = shapes [ 1 ], name = \"covariate\" ) input_m = tf . keras . layers . Input ( shape = shapes [ 2 ], name = \"feature\" ) input_y = tf . keras . layers . Input ( shape = shapes [ 3 ], name = \"observation\" ) return tf . keras . Model ( inputs = [ input_x , input_cov , input_m ], outputs = self . call (( input_x , input_cov , input_m , input_y )), ) __init__ ( output_dim , latent_dim_model_1 , latent_dim_model_y , activation_model_1_mid = 'sigmoid' , activation_model_1_out = 'softplus' , activation_model_y_mid = 'tanh' , offsetT_min =- np . inf , offsetT_max = np . inf , random_state = None ) Initialize a new instance of SReFT_ML. Parameters: output_dim ( int ) \u2013 The dimension of the output. Defaults to 4. latent_dim_model_1 ( int ) \u2013 The dimension of the latent dimention of model_1. latent_dim_model_1 ( int ) \u2013 The dimension of the latent dimention of model_y. activation_model_1_mid ( str , default: 'sigmoid' ) \u2013 The activation function to use. Defaults to \"sigmoid\". activation_model_1_out ( str , default: 'softplus' ) \u2013 The activation function to use. Defaults to \"softplus\". activation_model_y_mid ( str , default: 'tanh' ) \u2013 The activation function to use. Defaults to \"tanh\". offsetT_min ( float , default: - inf ) \u2013 The minimum value of offsetT. Defaults to -np.inf. offsetT_max ( float , default: inf ) \u2013 The maximum value of offsetT. Defaults to np.inf. random_state ( int | None , default: None ) \u2013 The seed for random number generation. Defaults to None. sreftml\\sreftml_model.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def __init__ ( self , output_dim : int , latent_dim_model_1 : int , latent_dim_model_y : int , activation_model_1_mid : str = \"sigmoid\" , activation_model_1_out : str = \"softplus\" , activation_model_y_mid : str = \"tanh\" , offsetT_min : float = - np . inf , offsetT_max : float = np . inf , random_state : int | None = None , ) -> None : \"\"\" Initialize a new instance of SReFT_ML. Args: output_dim (int, optional): The dimension of the output. Defaults to 4. latent_dim_model_1 (int): The dimension of the latent dimention of model_1. latent_dim_model_1 (int): The dimension of the latent dimention of model_y. activation_model_1_mid (str, optional): The activation function to use. Defaults to \"sigmoid\". activation_model_1_out (str, optional): The activation function to use. Defaults to \"softplus\". activation_model_y_mid (str, optional): The activation function to use. Defaults to \"tanh\". offsetT_min (float, optional): The minimum value of offsetT. Defaults to -np.inf. offsetT_max (float, optional): The maximum value of offsetT. Defaults to np.inf. random_state (int | None, optional): The seed for random number generation. Defaults to None. \"\"\" super ( SReFT , self ) . __init__ () initializer = tf . keras . initializers . GlorotUniform ( seed = random_state ) tf . random . set_seed ( random_state ) self . output_dim = int ( output_dim ) self . latent_dim_model_1 = int ( latent_dim_model_1 ) self . latent_dim_model_y = int ( latent_dim_model_y ) self . activation_model_1_mid = activation_model_1_mid self . activation_model_1_out = activation_model_1_out self . activation_model_y_mid = activation_model_y_mid self . offsetT_min = offsetT_min self . offsetT_max = offsetT_max self . lnvar_y = tf . Variable ( tf . zeros ( self . output_dim )) self . model_1 = tf . keras . Sequential ( name = \"estimate_offsetT\" ) self . model_1 . add ( tf . keras . layers . Dense ( self . latent_dim_model_1 , activation = self . activation_model_1_mid , kernel_initializer = initializer , ) ) self . model_1 . add ( tf . keras . layers . Dense ( 1 , activation = self . activation_model_1_out , kernel_initializer = initializer , ) ) self . model_y = tf . keras . Sequential ( name = \"estimate_prediction\" ) self . model_y . add ( tf . keras . layers . Dense ( self . latent_dim_model_y , activation = self . activation_model_y_mid , kernel_initializer = initializer , ) ) self . model_y . add ( tf . keras . layers . Dense ( self . output_dim , activation = None , kernel_initializer = initializer ) ) build_graph ( shapes ) Build the computational graph for the model. Parameters: shapes ( tuple [ int , int , int , int ] ) \u2013 The shapes of the inputs. Returns: Model \u2013 tf.keras.Model: The model with the built computational graph. sreftml\\sreftml_model.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 def build_graph ( self , shapes : tuple [ int , int , int , int ]) -> tf . keras . Model : \"\"\" Build the computational graph for the model. Args: shapes (tuple[int, int, int, int]): The shapes of the inputs. Returns: tf.keras.Model: The model with the built computational graph. \"\"\" input_x = tf . keras . layers . Input ( shape = shapes [ 0 ], name = \"time\" ) input_cov = tf . keras . layers . Input ( shape = shapes [ 1 ], name = \"covariate\" ) input_m = tf . keras . layers . Input ( shape = shapes [ 2 ], name = \"feature\" ) input_y = tf . keras . layers . Input ( shape = shapes [ 3 ], name = \"observation\" ) return tf . keras . Model ( inputs = [ input_x , input_cov , input_m ], outputs = self . call (( input_x , input_cov , input_m , input_y )), ) call ( inputs , training = False , ** kwargs ) Call the model with the given inputs. Parameters: inputs ( tuple [ ndarray , ndarray , ndarray , ndarray ] ) \u2013 The inputs for the model. training ( bool , default: False ) \u2013 Whether the model is in training mode. Defaults to False. Returns: Tensor \u2013 tf.Tensor: The predicted y values. Tensor \u2013 param **kwargs: sreftml\\sreftml_model.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def call ( self , inputs : tuple [ np . ndarray , np . ndarray , np . ndarray , np . ndarray ], training : bool = False , ** kwargs , ) -> tf . Tensor : \"\"\" Call the model with the given inputs. Args: inputs (tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]): The inputs for the model. training (bool, optional): Whether the model is in training mode. Defaults to False. Returns: tf.Tensor: The predicted y values. :param **kwargs: \"\"\" ( input_x , input_cov , input_m , input_y ) = inputs input1 = tf . concat (( input_m , input_cov ), axis =- 1 , name = \"concat\" ) offset = self . model_1 ( input1 , training = training ) offset = tf . clip_by_value ( offset , self . offsetT_min , self . offsetT_max , name = \"clip\" ) dis_time = tf . add ( input_x , offset , name = \"add\" ) input2 = tf . concat (( dis_time , input_cov ), axis =- 1 , name = \"concat\" ) y_pred = self . model_y ( input2 , training = training ) obj = utilities . tf_compute_negative_log_likelihood ( input_y , y_pred , self . lnvar_y ) self . add_loss ( tf . reduce_sum ( obj )) self . add_metric ( tf . reduce_mean ( obj ), name = \"loss\" ) return y_pred hp_search_for_sreftml ( df , scaled_features , grid_dict , n_grid_sample = 0 , n_splits = 3 , random_seed = 42 , callbacks = None , epochs = 9999 , batch_size = 256 ) Perform hyperparameter search for the SReFT_ML. Parameters: df ( DataFrame ) \u2013 Input dataframe containing the data. scaled_features ( tuple ) \u2013 Tuple of scaled feature. Pass x, cov, m and y in that order. grid_dict ( dict [ list [ any ]] ) \u2013 Dictionary of hyperparameter names and the corresponding values to be tested. n_grid_sample ( int , default: 0 ) \u2013 Number of samples to select randomly from the grid. Greater than 0 for random search and 0 or less for grid search. Default to 0. n_splits ( int , default: 3 ) \u2013 Number of splits for cross-validation. 2 or more is required. Default to 3. random_seed ( int , default: 42 ) \u2013 Random seed for reproducibility. Default to 42. callbacks ( list [ any ] | None , default: None ) \u2013 Callbacks to be used during model training. Default to None. epochs ( int , default: 9999 ) \u2013 Specifies the number of epochs to pass to the SReFT class. Defaults to 9999. batch_size ( int , default: 256 ) \u2013 Default to 256. Returns: DataFrame \u2013 pd.DataFrame: Dataframe containing the hyperparameters and corresponding scores. sreftml\\sreftml_model.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def hp_search_for_sreftml ( df : pd . DataFrame , scaled_features : tuple , grid_dict : dict [ list [ any ]], n_grid_sample : int = 0 , n_splits : int = 3 , random_seed : int = 42 , callbacks : list [ any ] | None = None , epochs : int = 9999 , batch_size : int = 256 , ) -> pd . DataFrame : \"\"\" Perform hyperparameter search for the SReFT_ML. Args: df (pd.DataFrame): Input dataframe containing the data. scaled_features (tuple): Tuple of scaled feature. Pass x, cov, m and y in that order. grid_dict (dict[list[any]]): Dictionary of hyperparameter names and the corresponding values to be tested. n_grid_sample (int, optional): Number of samples to select randomly from the grid. Greater than 0 for random search and 0 or less for grid search. Default to 0. n_splits (int, optional): Number of splits for cross-validation. 2 or more is required. Default to 3. random_seed (int, optional): Random seed for reproducibility. Default to 42. callbacks (list[any] | None, optional): Callbacks to be used during model training. Default to None. epochs (int, optional): Specifies the number of epochs to pass to the SReFT class. Defaults to 9999. batch_size (int, optional): Default to 256. Returns: pd.DataFrame: Dataframe containing the hyperparameters and corresponding scores. \"\"\" grid_prms = [ i for i in itertools . product ( * grid_dict . values ())] df_grid = pd . DataFrame ( grid_prms , columns = grid_dict . keys ()) if n_grid_sample > 0 : df_grid = df_grid . sample ( min ( int ( n_grid_sample ), len ( df_grid ))) x_scaled , cov_scaled , m_scaled , y_scaled = scaled_features scores = [] gkf = GroupKFold ( n_splits = n_splits ) for i , ( tmp_train_idx , tmp_vali_idx ) in enumerate ( gkf . split ( X = df , groups = df . ID )): for tmp_grid , grid_items in df_grid . iterrows (): current_iter = i * len ( df_grid ) + ( tmp_grid + 1 ) current_hp = \", \" . join ([ f \" { j } : { grid_items [ j ] } \" for j in grid_items . keys ()]) print ( f \" \\n ( { current_iter } / { n_splits * len ( df_grid ) } ) { current_hp } -----\" ) tmp_sreft = SReFT ( output_dim = y_scaled . shape [ 1 ], latent_dim_model_1 = m_scaled . shape [ 1 ], latent_dim_model_y = y_scaled . shape [ 1 ], activation_model_1_mid = grid_items [ \"activation_model_1_mid\" ], activation_model_1_out = grid_items [ \"activation_model_1_out\" ], activation_model_y_mid = grid_items [ \"activation_model_y_mid\" ], random_state = random_seed , ) tmp_sreft . compile ( optimizer = tf . keras . optimizers . Adam ( grid_items [ \"adam_lr\" ])) tmp_sreft . fit ( ( x_scaled [ tmp_train_idx , :], cov_scaled [ tmp_train_idx , :], m_scaled [ tmp_train_idx , :], y_scaled [ tmp_train_idx , :], ), y_scaled [ tmp_train_idx , :], validation_data = ( ( x_scaled [ tmp_vali_idx , :], cov_scaled [ tmp_vali_idx , :], m_scaled [ tmp_vali_idx , :], y_scaled [ tmp_vali_idx , :], ), y_scaled [ tmp_vali_idx , :], ), batch_size = batch_size , epochs = epochs , verbose = 0 , callbacks = callbacks , ) y_pred = tmp_sreft ( ( x_scaled [ tmp_vali_idx , :], cov_scaled [ tmp_vali_idx , :], m_scaled [ tmp_vali_idx , :], y_scaled [ tmp_vali_idx , :], ) ) temp_score = utilities . np_compute_negative_log_likelihood ( y_scaled [ tmp_vali_idx , :], y_pred , tmp_sreft . lnvar_y ) scores . append ( np . nanmean ( temp_score )) df_grid [ \"score\" ] = np . array ( scores ) . reshape ( n_splits , - 1 ) . mean ( axis = 0 ) . round ( 3 ) return df_grid calculate_offsetT_prediction ( sreft , df , scaled_features , scaler_y , name_biomarkers ) Calculate offsetT and prediction value of biomarkers. Parameters: sreft ( Model ) \u2013 The trained SReFT model. df ( DataFrame ) \u2013 The input DataFrame. scaled_features ( tuple [ ndarray , ndarray , ndarray , ndarray ] ) \u2013 The scaled features. Pass x, cov, m, and y in that order. scaler_y ( StanderdScaler ) \u2013 The scaler for y. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. Returns: DataFrame \u2013 pd.DataFrame: The DataFrame including the columns of the input DataFrame, offsetT and the prediction values. sreftml\\utilities.py 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 def calculate_offsetT_prediction ( sreft : tf . keras . Model , df : pd . DataFrame , scaled_features : tuple [ np . ndarray , np . ndarray , np . ndarray , np . ndarray ], scaler_y : sp . StandardScaler , name_biomarkers : list [ str ], ) -> pd . DataFrame : \"\"\" Calculate offsetT and prediction value of biomarkers. Args: sreft (tf.keras.Model): The trained SReFT model. df (pd.DataFrame): The input DataFrame. scaled_features (tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]): The scaled features. Pass x, cov, m, and y in that order. scaler_y (sp.StanderdScaler): The scaler for y. name_biomarkers (list[str]): List of biomarker names. Returns: pd.DataFrame: The DataFrame including the columns of the input DataFrame, offsetT and the prediction values. \"\"\" df_ = df . copy () x_scaled , cov_scaled , m_scaled , y_scaled = scaled_features offsetT = sreft . model_1 ( np . concatenate (( m_scaled , cov_scaled ), axis =- 1 )) y_pred = pd . DataFrame ( scaler_y . inverse_transform ( sreft ( scaled_features )), columns = [ f \" { biomarker } _pred\" for biomarker in name_biomarkers ], ) df_ = df_ . assign ( offsetT = offsetT , ** y_pred ) return df_ clean_duplicate ( df , cols , duplicate_key ) Checks for duplicate entries in the DataFrame based on the specified columns and removes NaNs; also removes duplicate entries if a subset is specified. Parameters: df ( DataFrame ) \u2013 The DataFrame to check and drop duplicates from. cols ( list [ str ] ) \u2013 List of column names to check (and remove) for duplicates. duplicate_key ( list [ str ] | str | None ) \u2013 If specify, duplicate deletion will be performed. Then, check duplicate within sepecified columns. Returns: DataFrame \u2013 pd.DataFrame: DataFrame with duplicates removed. It includes only the columns specified in cols and duplicate_key. Warns: The warning message depends on the `subset` parameter \u2013 sreftml\\utilities.py 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 def clean_duplicate ( df : pd . DataFrame , cols : list [ str ], duplicate_key : list [ str ] | str | None ) -> pd . DataFrame : \"\"\" Checks for duplicate entries in the DataFrame based on the specified columns and removes NaNs; also removes duplicate entries if a subset is specified. Parameters: df (pd.DataFrame): The DataFrame to check and drop duplicates from. cols (list[str]): List of column names to check (and remove) for duplicates. duplicate_key (list[str] | str | None): If specify, duplicate deletion will be performed. Then, check duplicate within sepecified columns. Returns: pd.DataFrame: DataFrame with duplicates removed. It includes only the columns specified in cols and duplicate_key. Warnings: If any duplicates are found in the DataFrame after cleaning, a warning message is displayed. The warning message depends on the `subset` parameter: - If `subset` is None, the warning message indicates that some records are duplicates across all columns in `cols`. - If `subset` is not None, the warning message indicates that some records are duplicates within the same subset. \"\"\" if type ( duplicate_key ) is str : duplicate_key = [ duplicate_key ] if duplicate_key is None : df_ = df [ cols ] . dropna () if df_ . duplicated () . any (): warnings . warn ( \"Some records are duplicates. Set duplicate_key if necessary.\" ) else : df_ = df [ cols + duplicate_key ] . dropna () . drop_duplicates () if df_ . duplicated ( subset = duplicate_key ) . any (): warnings . warn ( \"Duplicate records remain in some duplicate_keys. Add duplicate_key if necessary.\" ) return df_ compute_permutation_importance ( random_seed , sreft , x_test , cov_test , m_test , y_test , n_sample ) Compute permutation importance of the model. Parameters: random_seed ( int ) \u2013 The seed for the random number generator. sreft ( Model ) \u2013 The model for which to calculate permutation importance. x_test ( ndarray ) \u2013 The x test data. cov_test ( ndarray ) \u2013 The covariates test data. m_test ( ndarray ) \u2013 The m test data. y_test ( ndarray ) \u2013 The y test data. n_sample ( int ) \u2013 The number of samples. Returns: tuple [ ndarray , ndarray ] \u2013 tuple[np.ndarray, np.ndarray]: The mean and standard deviation of the permutation importance. sreftml\\utilities.py 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 def compute_permutation_importance ( random_seed : int , sreft : tf . keras . Model , x_test : np . ndarray , cov_test : np . ndarray , m_test : np . ndarray , y_test : np . ndarray , n_sample : int , ) -> tuple [ np . ndarray , np . ndarray ]: \"\"\" Compute permutation importance of the model. Args: random_seed (int): The seed for the random number generator. sreft (tf.keras.Model): The model for which to calculate permutation importance. x_test (np.ndarray): The x test data. cov_test (np.ndarray): The covariates test data. m_test (np.ndarray): The m test data. y_test (np.ndarray): The y test data. n_sample (int): The number of samples. Returns: tuple[np.ndarray, np.ndarray]: The mean and standard deviation of the permutation importance. \"\"\" rng = np . random . default_rng ( random_seed ) y_pred = sreft (( x_test , cov_test , m_test , y_test )) . numpy () neglls_orig = np_compute_negative_log_likelihood ( y_test , y_pred , sreft . lnvar_y ) mean_pi = [] std_pi = [] n_pi = m_test . shape [ 1 ] + cov_test . shape [ 1 ] for i in range ( n_pi ): pis = [] for j in range ( n_sample ): if i < m_test . shape [ 1 ]: m_test_rand = np . copy ( m_test ) rng . shuffle ( m_test_rand [:, i ]) y_pred_rand = sreft (( x_test , cov_test , m_test_rand , y_test )) . numpy () else : cov_test_rand = np . copy ( cov_test ) rng . shuffle ( cov_test_rand [:, i - m_test . shape [ 1 ]]) y_pred_rand = sreft (( x_test , cov_test_rand , m_test , y_test )) . numpy () neglls_rand = np_compute_negative_log_likelihood ( y_test , y_pred_rand , sreft . lnvar_y ) nglls_diff = neglls_rand - neglls_orig temp_pi = np . nanmean ( nglls_diff ) pis . append ( temp_pi ) mean_pi . append ( np . mean ( pis )) std_pi . append ( np . std ( pis )) return np . array ( mean_pi ), np . array ( std_pi ) get_current_commit_hash () Retrieves the current commit hash of the git repository. Returns: str ( str ) \u2013 The current commit hash or a placeholder string if an error occurs. sreftml\\utilities.py 238 239 240 241 242 243 244 245 246 247 248 249 250 def get_current_commit_hash () -> str : \"\"\" Retrieves the current commit hash of the git repository. Returns: str: The current commit hash or a placeholder string if an error occurs. \"\"\" try : commit_hash = subprocess . check_output ([ \"git\" , \"rev-parse\" , \"HEAD\" ]) return commit_hash . strip () . decode ( \"utf-8\" ) except subprocess . CalledProcessError : warnings . warn ( \"Could not get the current commit hash.\" , UserWarning ) return \"commit_hash_not_available\" linear_regression_each_subject ( df , y_columns ) Perform linear regression for each subject (ID) in the given DataFrame. Parameters: df ( DataFrame ) \u2013 The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns ( list [ str ] ) \u2013 A list of column names (strings) representing the target variables to be regressed. Returns: DataFrame \u2013 pd.DataFrame: A DataFrame with the regression results for each subject. sreftml\\utilities.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def linear_regression_each_subject ( df : pd . DataFrame , y_columns : list [ str ] ) -> pd . DataFrame : \"\"\" Perform linear regression for each subject (ID) in the given DataFrame. Args: df (pd.DataFrame): The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns (list[str]): A list of column names (strings) representing the target variables to be regressed. Returns: pd.DataFrame: A DataFrame with the regression results for each subject. \"\"\" model = LinearRegression () results = { \"ID\" : df . ID . unique ()} for y in y_columns : slopes = [] intercepts = [] for _ , group in df . groupby ( \"ID\" ): x_values = group [ \"TIME\" ] . values . reshape ( - 1 , 1 ) y_values = group [ y ] . values valid_mask = ~ np . isnan ( y_values ) valid_sample_count = valid_mask . sum () if valid_sample_count == 0 : slopes . append ( np . nan ) intercepts . append ( np . nan ) continue model . fit ( x_values [ valid_mask ], y_values [ valid_mask ]) if valid_sample_count == 1 : slopes . append ( np . nan ) else : slopes . append ( model . coef_ [ 0 ]) intercepts . append ( model . intercept_ ) results [ f \" { y } _slope\" ] = slopes results [ f \" { y } _intercept\" ] = intercepts result = pd . DataFrame ( results ) result = result [ [ \"ID\" ] + [ i + j for j in [ \"_slope\" , \"_intercept\" ] for i in y_columns ] ] return result mixed_effect_linear_regression ( df , y_columns ) Perform mixed-effects linear regression on the given DataFrame. Parameters: df ( DataFrame ) \u2013 The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns ( list [ str ] ) \u2013 A list of column names (strings) representing the target variables to be regressed. Returns: tuple ( tuple [ DataFrame , list ] ) \u2013 A tuple containing two elements: - result (pd.DataFrame): The DataFrame with the fitted regression parameters for each individual. - models (list): A list of fitted mixed-effects regression models for each target variable. sreftml\\utilities.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def mixed_effect_linear_regression ( df : pd . DataFrame , y_columns : list [ str ] ) -> tuple [ pd . DataFrame , list ]: \"\"\" Perform mixed-effects linear regression on the given DataFrame. Args: df (pd.DataFrame): The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns (list[str]): A list of column names (strings) representing the target variables to be regressed. Returns: tuple: A tuple containing two elements: - result (pd.DataFrame): The DataFrame with the fitted regression parameters for each individual. - models (list): A list of fitted mixed-effects regression models for each target variable. \"\"\" result = pd . DataFrame ( df . ID . unique ()) . set_axis ([ \"ID\" ], axis = 1 ) models = [] for y in y_columns : df_ = ( df [[ \"ID\" , \"TIME\" , y ]] . dropna () . reset_index ( drop = True ) . set_axis ([ \"ID\" , \"TIME\" , \"TARGET\" ], axis = 1 ) ) full_model = smf . mixedlm ( \"TARGET ~ TIME\" , data = df_ , groups = \"ID\" , re_formula = \"~TIME\" ) . fit () random_effects = pd . DataFrame ( full_model . random_effects ) . T . values params_pop = full_model . params [ 0 : 2 ] . values . T params_ind = pd . DataFrame ( params_pop + random_effects ) . set_axis ( [ f \" { y } _intercept\" , f \" { y } _slope\" ], axis = 1 ) params_ind [ \"ID\" ] = pd . DataFrame ( full_model . random_effects ) . T . index . values result = result . merge ( params_ind , how = \"outer\" ) models . append ( full_model ) result = result [ [ \"ID\" ] + [ i + j for j in [ \"_slope\" , \"_intercept\" ] for i in y_columns ] ] return result , models n2mfrow ( n_plots , ncol_max = 4 ) Determines the number of rows and columns required to plot a given number of subplots. Parameters: n_plots ( int ) \u2013 Total number of subplots. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns for subplots. Defaults to 4. Returns: tuple ( tuple [ int , int ] ) \u2013 (number of rows, number of columns) sreftml\\utilities.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def n2mfrow ( n_plots : int , ncol_max : int = 4 ) -> tuple [ int , int ]: \"\"\" Determines the number of rows and columns required to plot a given number of subplots. Args: n_plots (int): Total number of subplots. ncol_max (int, optional): Maximum number of columns for subplots. Defaults to 4. Returns: tuple: (number of rows, number of columns)\"\"\" n_plots = int ( n_plots ) nrow = math . ceil ( n_plots / ncol_max ) ncol = math . ceil ( n_plots / nrow ) return nrow , ncol np_compute_negative_log_likelihood ( y_true , y_pred , lnvar_y ) Computes the negative log likelihood between true and predicted values using numpy. Parameters: y_true ( array ) \u2013 True target values. y_pred ( array ) \u2013 Predicted target values. lnvar_y ( array ) \u2013 Natural logarithm of the variance. Returns: ndarray \u2013 np.array: The negative log likelihood for each instance. sreftml\\utilities.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 def np_compute_negative_log_likelihood ( y_true : np . ndarray , y_pred : np . ndarray , lnvar_y : np . ndarray ) -> np . ndarray : \"\"\" Computes the negative log likelihood between true and predicted values using numpy. Args: y_true (np.array): True target values. y_pred (np.array): Predicted target values. lnvar_y (np.array): Natural logarithm of the variance. Returns: np.array: The negative log likelihood for each instance. \"\"\" neg_ll = lnvar_y + np . power ( y_true - y_pred , 2 ) / np . exp ( lnvar_y ) return np . nansum ( neg_ll , axis = 1 ) split_data_for_sreftml ( df , name_biomarkers , name_covariates , isMixedlm = True ) Split data for sreftml. Parameters: df ( DataFrame ) \u2013 Input DataFrame. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. name_covariates ( list [ str ] ) \u2013 List of covariate names. isMixedlm ( bool , default: True ) \u2013 Select whether to use a mixed-effects model when computing model_1 features. Default to True. Returns: tuple ( tuple [ DataFrame , DataFrame , DataFrame , DataFrame ] ) \u2013 A tuple containing the following arrays: - x (pd.DataFrame): Time values. - cov (pd.DataFrame): Covariate values. - m (pd.DataFrame): Slope and intercept from regression by biomarker. - y (pd.DataFrame): Biomarker values. sreftml\\utilities.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def split_data_for_sreftml ( df : pd . DataFrame , name_biomarkers : list [ str ], name_covariates : list [ str ], isMixedlm : bool = True , ) -> tuple [ pd . DataFrame , pd . DataFrame , pd . DataFrame , pd . DataFrame ]: \"\"\" Split data for sreftml. Args: df (pd.DataFrame): Input DataFrame. name_biomarkers (list[str]): List of biomarker names. name_covariates (list[str]): List of covariate names. isMixedlm (bool): Select whether to use a mixed-effects model when computing model_1 features. Default to True. Returns: tuple: A tuple containing the following arrays: - x (pd.DataFrame): Time values. - cov (pd.DataFrame): Covariate values. - m (pd.DataFrame): Slope and intercept from regression by biomarker. - y (pd.DataFrame): Biomarker values. \"\"\" df_ = df . copy () if len ( name_covariates ) > 0 and pd . isna ( df [ name_covariates ]) . any () . any (): warnings . warn ( \"Missing value imputation was performed for some covariates.\" ) df_ [ name_covariates ] = df_ [ name_covariates ] . fillna ( df . loc [:, name_covariates ] . mean () ) if isMixedlm : linreg , models = mixed_effect_linear_regression ( df_ , name_biomarkers ) if pd . isna ( linreg ) . any () . any (): warnings . warn ( \"Missing value imputation was performed for some features.\" ) prms = [ i . params [ 0 ] for i in models ] + [ i . params [ 1 ] for i in models ] labels = [ i + j for j in [ \"_intercept\" , \"_slope\" ] for i in name_biomarkers ] dict_slope = dict ( zip ( labels , prms )) linreg = linreg . fillna ( dict_slope ) else : linreg = linear_regression_each_subject ( df_ , name_biomarkers ) if pd . isna ( linreg ) . any () . any (): warnings . warn ( \"Missing value imputation was performed for some features.\" ) linreg = linreg . fillna ( linreg . mean ()) df_ = df_ . merge ( linreg ) x = df_ . TIME cov = df_ [ name_covariates ] m = df_ . loc [:, df_ . columns . str . contains ( \"_slope|_intercept\" )] y = df_ [ name_biomarkers ] return x , cov , m , y tf_compute_negative_log_likelihood ( y_true , y_pred , lnvar_y ) Computes the negative log likelihood between true and predicted values using tensorflow. Parameters: y_true ( ndarray ) \u2013 True target values. y_pred ( ndarray ) \u2013 Predicted target values. lnvar_y ( Variable ) \u2013 Natural logarithm of the variance. Returns: Tensor \u2013 tf.Tensor: The negative log likelihood for each instance. sreftml\\utilities.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def tf_compute_negative_log_likelihood ( y_true : np . ndarray , y_pred : np . ndarray , lnvar_y : tf . Variable ) -> tf . Tensor : \"\"\" Computes the negative log likelihood between true and predicted values using tensorflow. Args: y_true (np.ndarray): True target values. y_pred (np.ndarray): Predicted target values. lnvar_y (tf.Variable): Natural logarithm of the variance. Returns: tf.Tensor: The negative log likelihood for each instance. \"\"\" is_nan = tf . math . is_nan ( y_true ) y_true = tf . where ( is_nan , tf . zeros_like ( y_true ), y_true ) y_pred = tf . where ( is_nan , tf . zeros_like ( y_pred ), y_pred ) neg_ll = lnvar_y + tf . pow ( y_true - y_pred , 2 ) / tf . exp ( lnvar_y ) neg_ll = tf . where ( is_nan , tf . zeros_like ( neg_ll ), neg_ll ) return tf . reduce_sum ( neg_ll , axis = 1 )","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#sreftml.plots.correlation_plot_strata","text":"Generate a heatmap and pairplot of biomarkers for each strata. Parameters: df ( DataFrame ) \u2013 Dataframe with biomarkers and strata information. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names to plot. strata ( str , default: 'status' ) \u2013 The name of the strata column. Default is 'status'. Returns: None \u2013 None sreftml\\plots.py 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def correlation_plot_strata ( df : pd . DataFrame , name_biomarkers : list [ str ], strata : str = \"status\" ) -> None : \"\"\" Generate a heatmap and pairplot of biomarkers for each strata. Args: df (pd.DataFrame): Dataframe with biomarkers and strata information. name_biomarkers (list[str]): List of biomarker names to plot. strata (str, optional): The name of the strata column. Default is 'status'. Returns: None \"\"\" for i in range ( 2 ): plt . figure ( figsize = ( 10 , 10 )) sns . heatmap ( df [ df [ strata ] == i ][ name_biomarkers ] . corr (), cmap = \"coolwarm\" , vmin =- 1 , vmax = 1 , annot = True , fmt = \"1.2f\" , ) plt . figure ( figsize = ( 10 , 10 )) sns . pairplot ( df [ df [ strata ] == i ][ name_biomarkers ] . reset_index ( drop = True )) sns . pairplot ( df [ name_biomarkers + [ strata ]], hue = strata , diag_kind = \"hist\" ) return None","title":"correlation_plot_strata()"},{"location":"reference/#sreftml.plots.get_regression_line_label","text":"Generate a label for a line fitted to the given x and y data using linear regression. Parameters: x ( Series ) \u2013 Series of x-axis data. y ( Series ) \u2013 Series of y-axis data. Returns: str ( str ) \u2013 Label for the fitted line, including slope, intercept, and R-squared value. sreftml\\plots.py 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 def get_regression_line_label ( x : pd . Series , y : pd . Series ) -> str : \"\"\" Generate a label for a line fitted to the given x and y data using linear regression. Parameters: x (pd.Series): Series of x-axis data. y (pd.Series): Series of y-axis data. Returns: str: Label for the fitted line, including slope, intercept, and R-squared value. \"\"\" slope , intercept , r_value , p_value , std_err = linregress ( x , y ) label_line_1 = rf \"$y= { slope : .3f } x { '' if intercept < 0 else '+' }{ intercept : .3f } $\" label_line_2 = rf \"$R^2: { r_value ** 2 : .2f } $\" label_line = label_line_1 + \" \\n \" + label_line_2 return label_line","title":"get_regression_line_label()"},{"location":"reference/#sreftml.plots.histogram_plot","text":"Plot a stratified histogram by column. Parameters: df ( DataFrame ) \u2013 Input DataFrame. col_name ( list [ str ] | str ) \u2013 List of column names in df. hue ( str | None , default: None ) \u2013 Column to stratify the plot. Defaults to None. share{x, ( y} (bool | \"col\" | \"row\" ) \u2013 This is passed directly to seaborn.FacetGrid. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns. Defaults to 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: FacetGrid \u2013 sns.axisgrid.FacetGrid: FacetGrid object with the distribution plot. sreftml\\plots.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 def histogram_plot ( df : pd . DataFrame , col_name : list [ str ] | str , hue : str | None = None , sharex : bool = True , sharey : bool = True , ncol_max : int = 4 , save_file_path : str | None = None , ) -> sns . axisgrid . FacetGrid : \"\"\" Plot a stratified histogram by column. Args: df (pd.DataFrame): Input DataFrame. col_name (list[str] | str): List of column names in df. hue (str | None, optional): Column to stratify the plot. Defaults to None. share{x, y} (bool | \"col\" | \"row\", optional): This is passed directly to seaborn.FacetGrid. ncol_max (int, optional): Maximum number of columns. Defaults to 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.FacetGrid: FacetGrid object with the distribution plot. \"\"\" if type ( col_name ) is str : col_name = [ col_name ] col_wrap = n2mfrow ( len ( col_name ), ncol_max = ncol_max )[ 1 ] if hue is None : df_melt = pd . melt ( df [ col_name ]) else : df_melt = pd . melt ( df [ col_name + [ hue ]], hue ) g = sns . FacetGrid ( df_melt , col = \"variable\" , hue = hue , col_wrap = col_wrap , sharex = sharex , sharey = sharey , height = 3.5 , ) g . map ( plt . hist , \"value\" , alpha = 0.4 ) g . add_legend () g . set_titles ( \" {col_name} \" ) if save_file_path : g . savefig ( save_file_path , transparent = True ) return g","title":"histogram_plot()"},{"location":"reference/#sreftml.plots.hp_search_plot","text":"Plot the results of hyperparameters search. Parameters: df_grid ( DataFrame ) \u2013 DataFrame containing the grid of hyperparameters. eval_col ( str , default: 'score' ) \u2013 The column to use for evaluation. Defaults to \"score\". save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def hp_search_plot ( df_grid : pd . DataFrame , eval_col : str = \"score\" , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Plot the results of hyperparameters search. Args: df_grid (pd.DataFrame): DataFrame containing the grid of hyperparameters. eval_col (str, optional): The column to use for evaluation. Defaults to \"score\". save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" df_grid = df_grid . sort_values ( eval_col , ascending = False ) . reset_index ( drop = True ) cols = df_grid . columns . tolist () cols . remove ( eval_col ) cols . append ( eval_col ) df_grid_sorted = df_grid [ cols ] string_columns = df_grid_sorted . select_dtypes ( include = \"object\" ) . columns numeric_columns = df_grid_sorted . select_dtypes ( exclude = \"object\" ) . columns for i in string_columns : df_grid_sorted [ i ] = sp . LabelEncoder () . fit_transform ( df_grid_sorted [ i ]) scaler = sp . MinMaxScaler () df_grid_scaled = pd . DataFrame ( scaler . fit_transform ( df_grid_sorted ), columns = df_grid_sorted . columns ) cm = plt . get_cmap ( \"seismic\" , 2 ) fig = plt . figure ( tight_layout = True , dpi = 300 ) for i , row in df_grid_scaled . iterrows (): if i == len ( df_grid_sorted ) - 1 : plt . plot ( df_grid_scaled . columns , row . values , color = cm ( 1 ), lw = 4 ) else : plt . plot ( df_grid_scaled . columns , row . values , color = cm ( 0 )) for i in string_columns : label_unique = df_grid [ i ] . unique () scaled_unique = df_grid_scaled [ i ] . unique () for label_ , scaled_ in zip ( label_unique , scaled_unique ): plt . text ( i , scaled_ , label_ , ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" ) for i in numeric_columns : min_val = df_grid_sorted [ i ] . min () max_val = df_grid_sorted [ i ] . max () plt . text ( i , 0 , min_val , ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" ) if min_val != max_val : plt . text ( i , 1 , max_val , ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" ) for i , val in enumerate ( df_grid_scaled . iloc [ - 1 , :]): col_name = df_grid_scaled . columns [ i ] if val not in [ 0 , 1 ] and col_name in numeric_columns : plt . text ( col_name , val , df_grid_sorted . iloc [ - 1 , i ], ha = \"center\" , va = \"center\" , backgroundcolor = \"white\" , ) plt . xticks ( rotation = 45 ) plt . ylabel ( \"Min-Max Normalized value\" ) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True ) return fig","title":"hp_search_plot()"},{"location":"reference/#sreftml.plots.learning_history_plot","text":"Plot learning history. Parameters: df_loss ( DataFrame ) \u2013 Data frame converted from tf.keras.callbacks.History. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 def learning_history_plot ( df_loss : pd . DataFrame , save_file_path : str | None = None ) -> plt . Figure : \"\"\" Plot learning history. Args: df_loss (pd.DataFrame): Data frame converted from tf.keras.callbacks.History. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" fig = plt . figure ( tight_layout = True , dpi = 300 ) plt . plot ( df_loss [ \"loss\" ], label = \"training\" ) plt . plot ( df_loss [ \"val_loss\" ], label = \"validation\" ) plt . xlabel ( \"Epoch\" ) plt . ylabel ( \"loss\" ) plt . legend () if save_file_path is not None : plt . savefig ( save_file_path , transparent = True ) return fig","title":"learning_history_plot()"},{"location":"reference/#sreftml.plots.model_sigmoid","text":"Compute a sigmoid model prediction. Parameters: t ( float | np.ndarray] ) \u2013 Time or array of time values. cov ( float | np.ndarray] ) \u2013 Covariate or array of covariate values. params ( Series ) \u2013 Parameters for the model. Returns: ndarray \u2013 np.ndarray: The model predictions. sreftml\\plots.py 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 def model_sigmoid ( t : float | np . ndarray , cov : float | np . ndarray , params : pd . Series ) -> np . ndarray : \"\"\" Compute a sigmoid model prediction. Args: t (float | np.ndarray]): Time or array of time values. cov (float | np.ndarray]): Covariate or array of covariate values. params (np.Series): Parameters for the model. Returns: np.ndarray: The model predictions. \"\"\" covval = np . exp ( params . filter ( like = \"Covariate\" )) . values . reshape ( 1 , - 1 ) ** cov covval = np . prod ( covval , axis = 1 ) li = params [ \"a\" ] + params [ \"b\" ] * covval * t output = 1 / ( 1 + np . exp ( - li )) return output","title":"model_sigmoid()"},{"location":"reference/#sreftml.plots.multi_panel_scatter_plot","text":"Draw scatter plots with multiple panels based on stratification factors. Parameters: df ( DataFrame ) \u2013 Input DataFrame. x_col ( str ) \u2013 X-axis column in df. y_col ( str ) \u2013 Y-axis column in df. hue ( list [ str ] | str ) \u2013 Columns to stratify the plot. duplicate_key ( list [ str ] | str | None , default: None ) \u2013 Specify the column name(s) from which duplicates are to be removed. Defaults to None. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns. Defaults to 4. density ( bool , default: False ) \u2013 Whether to plot density. Defaults to False. identity ( bool , default: False ) \u2013 Whether to plot identity line. Defaults to False. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: FacetGrid \u2013 sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. sreftml\\plots.py 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 def multi_panel_scatter_plot ( df : pd . DataFrame , x_col : str , y_col : str , hue : list [ str ] | str , duplicate_key : list [ str ] | str | None = None , ncol_max : int = 4 , density : bool = False , identity : bool = False , save_file_path : str | None = None , ) -> sns . axisgrid . FacetGrid : \"\"\" Draw scatter plots with multiple panels based on stratification factors. Args: df (pd.DataFrame): Input DataFrame. x_col (str): X-axis column in df. y_col (str): Y-axis column in df. hue (list[str] | str): Columns to stratify the plot. duplicate_key (list[str] | str | None, optional): Specify the column name(s) from which duplicates are to be removed. Defaults to None. ncol_max (int, optional): Maximum number of columns. Defaults to 4. density (bool, optional): Whether to plot density. Defaults to False. identity (bool, optional): Whether to plot identity line. Defaults to False. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. \"\"\" if type ( hue ) is str : hue = [ hue ] df_ = clean_duplicate ( df , [ x_col , y_col ] + hue , duplicate_key ) hue_ = \", \" . join ( hue ) if len ( hue ) > 1 : df_ [ hue_ ] = df [ hue ] . apply ( lambda x : \", \" . join ( x . astype ( str )), axis = 1 ) unique_hue = np . sort ( df_ [ hue_ ] . unique ()) col_wrap = n2mfrow ( len ( df_ [ hue_ ] . unique ()), ncol_max = ncol_max )[ 1 ] g = sns . lmplot ( data = df_ , x = x_col , y = y_col , col = hue_ , col_wrap = col_wrap , col_order = unique_hue , scatter = not density , scatter_kws = { \"alpha\" : 0.5 , \"s\" : 20 , \"edgecolor\" : \"none\" }, line_kws = { \"color\" : \"red\" , \"label\" : \"lines\" }, ) g . figure . set_dpi ( 300 ) for idx , s in enumerate ( unique_hue ): df_hue = df_ . loc [ df_ [ hue_ ] == s ] label_line = get_regression_line_label ( df_hue [ x_col ], df_hue [ y_col ]) if density : xy = df_hue [[ x_col , y_col ]] . values . T z = gaussian_kde ( xy )( xy ) x_ = xy . T [:, : 1 ] y_ = xy . T [:, 1 :] g . axes [ idx ] . scatter ( x_ , y_ , c = z , s = 20 , edgecolor = \"none\" , cmap = \"viridis\" ) g . axes [ idx ] . legend ([ label_line ]) else : g . axes [ idx ] . legend ([ \"_nolegend_\" , label_line ]) if identity : if df [ y_col ] . max () < df [ x_col ] . min () or df [ x_col ] . max () < df [ y_col ] . min (): warnings . warn ( f \"The data range of { x_col } and { y_col } is not covered, although idenntity=True. Skip drawing of identity line.\" ) else : min_ = df [[ x_col , y_col ]] . min () . max () max_ = df [[ x_col , y_col ]] . max () . min () g . axes [ idx ] . plot ([ min_ , max_ ], [ min_ , max_ ], \"k--\" ) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True , dpi = 300 ) return g","title":"multi_panel_scatter_plot()"},{"location":"reference/#sreftml.plots.permutation_importance_plot","text":"Generate a permutation importance plot. Parameters: mean_pi ( ndarray ) \u2013 Array of mean permutation importance values. std_pi ( ndarray ) \u2013 Array of standard deviation permutation importance values. feature_label ( list [ str ] ) \u2013 List of feature names for which PI was measured. y_axis_log ( bool , default: False ) \u2013 Whether to use log scale for y-axis. Default is False. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 def permutation_importance_plot ( mean_pi : np . ndarray , std_pi : np . ndarray , feature_label : list [ str ], y_axis_log : bool = False , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a permutation importance plot. Args: mean_pi (np.ndarray): Array of mean permutation importance values. std_pi (np.ndarray): Array of standard deviation permutation importance values. feature_label (list[str]): List of feature names for which PI was measured. y_axis_log (bool, optional): Whether to use log scale for y-axis. Default is False. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" rank = np . argsort ( mean_pi ) fig = plt . figure ( figsize = ( len ( rank ) / 4 , 10 ), dpi = 300 , tight_layout = True ) plt . bar ([ feature_label [ i ] for i in rank ], mean_pi [ rank ], yerr = std_pi [ rank ]) plt . xticks ( rotation = 45 , ha = \"right\" ) if y_axis_log : plt . ylabel ( \"Permutation Importance (log scale)\" ) plt . yscale ( \"log\" ) else : plt . ylabel ( \"Permutation Importance\" ) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True ) return fig","title":"permutation_importance_plot()"},{"location":"reference/#sreftml.plots.prediction_plot","text":"Plot the predictions of the SReFT model. Parameters: sreft ( Model ) \u2013 The SReFT model. df ( DataFrame ) \u2013 DataFrame with the data. name_biomarkers ( list [ str ] ) \u2013 The names of the biomarkers. name_covariates ( list [ str ] ) \u2013 The names of the covariates. scaler_y ( StandardScaler ) \u2013 The scaler for the y values. scaler_cov ( StandardScaler ) \u2013 The scaler for the covariate values. res ( int , default: 100 ) \u2013 Resolution of the plot. Defaults to 100. density ( bool , default: False ) \u2013 Whether to plot density or not. Defaults to False. useOffsetT ( bool , default: True ) \u2013 Whether to use offsetT or not. Defaults to True. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns for subplots. Defaults to 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 def prediction_plot ( sreft : tf . keras . Model , df : pd . DataFrame , name_biomarkers : list [ str ], name_covariates : list [ str ], scaler_y : sp . StandardScaler , scaler_cov : sp . StandardScaler , res : int = 100 , density : bool = False , useOffsetT : bool = True , ncol_max : int = 4 , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Plot the predictions of the SReFT model. Args: sreft (tf.keras.Model): The SReFT model. df (pd.DataFrame): DataFrame with the data. name_biomarkers (list[str]): The names of the biomarkers. name_covariates (list[str]): The names of the covariates. scaler_y (sp.StandardScaler): The scaler for the y values. scaler_cov (sp.StandardScaler): The scaler for the covariate values. res (int, optional): Resolution of the plot. Defaults to 100. density (bool, optional): Whether to plot density or not. Defaults to False. useOffsetT (bool, optional): Whether to use offsetT or not. Defaults to True. ncol_max (int, optional): Maximum number of columns for subplots. Defaults to 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" n_biomarker = len ( name_biomarkers ) n_covariate = len ( name_covariates ) n_row , n_col = n2mfrow ( n_biomarker , ncol_max ) cm = plt . colormaps [ \"Set1\" ] y_data = df [ name_biomarkers ] . values if useOffsetT : x_data = df . TIME . values + df . offsetT . values cov_dummy = np . array ([ i for i in itertools . product ([ 0 , 1 ], repeat = n_covariate )]) cov_dummy = np . repeat ( cov_dummy , res , axis = 0 ) cov_dummy_scaled = scaler_cov . transform ( cov_dummy ) x_model = np . linspace ( x_data . min (), x_data . max (), res ) x_model = np . tile ( x_model , 2 ** n_covariate ) . reshape ( - 1 , 1 ) x_model = np . concatenate (( x_model , cov_dummy_scaled ), axis = 1 ) y_model = scaler_y . inverse_transform ( sreft . model_y ( x_model )) else : x_data = df . TIME . values fig , axs = plt . subplots ( n_row , n_col , figsize = ( n_col * 3 , n_row * 3 ), tight_layout = True , dpi = 300 , sharex = \"row\" , ) for k , ax in enumerate ( axs . flat ): if k >= n_biomarker : ax . axis ( \"off\" ) continue if density : x_ = x_data [ ~ np . isnan ( y_data [:, k ])] y_ = y_data [ ~ np . isnan ( y_data [:, k ]), k ] if np . var ( x_ ) == 0 : z = gaussian_kde ( y_ )( y_ ) else : xy = np . vstack ([ x_ , y_ ]) z = gaussian_kde ( xy )( xy ) idx = z . argsort () ax . scatter ( x_ [ idx ], y_ [ idx ], c = z [ idx ], s = 2 , label = \"_nolegend_\" ) else : ax . scatter ( x_data , y_data [:, k ], c = \"silver\" , s = 2 , label = \"_nolegend_\" ) if useOffsetT : for i in range ( 2 ** n_covariate ): ax . plot ( x_model [ res * i : res * ( i + 1 ), 0 ], y_model [ res * i : res * ( i + 1 ), k ], c = cm ( i ), lw = 4 , ) ax . set_xlabel ( \"Disease Time (year)\" ) else : ax . set_xlabel ( \"Observation Period (year)\" ) ax . set_title ( name_biomarkers [ k ], fontsize = 15 ) if n_covariate > 0 : legend_labels = [ \", \" . join ( format ( i , f \"0 { n_covariate } b\" )) for i in range ( 2 ** n_covariate ) ] fig . legend ( loc = \"center\" , framealpha = 0 , bbox_to_anchor = ( 1.1 , 0.5 ), ncol = 1 , title = \", \" . join ( name_covariates ), labels = legend_labels , ) if save_file_path is not None : fig . savefig ( save_file_path , transparent = True , bbox_inches = \"tight\" ) return fig","title":"prediction_plot()"},{"location":"reference/#sreftml.plots.prediction_sim_plot","text":"Generate a prediction simulation plot. Parameters: df ( DataFrame ) \u2013 Dataframe with biomarkers and other information. sreft ( Model ) \u2013 Object responsible for transforming the data. params_true ( DataFrame ) \u2013 Dataframe with true parameters for the model. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. name_covariates ( list [ str ] ) \u2013 List of covariate names. scaler_cov ( StandardScaler ) \u2013 Scaler for the covariate values. scaler_y ( StandardScaler ) \u2013 Scaler for the y values. res ( int , default: 100 ) \u2013 Resolution for the plot. Default is 100. density ( bool , default: False ) \u2013 Whether to use density or not. Default is False. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns for the plot. Default is 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure ( Figure ) \u2013 The created matplotlib figure. sreftml\\plots.pydef prediction_sim_plot ( df : pd . DataFrame , sreft : tf . keras . Model , params_true : pd . DataFrame , name_biomarkers : list [ str ], name_covariates : list [ str ], scaler_cov : sp . StandardScaler , scaler_y : sp . StandardScaler , res : int = 100 , density : bool = False , ncol_max : int = 4 , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a prediction simulation plot. Args: df (pd.DataFrame): Dataframe with biomarkers and other information. sreft (tf.keras.Model): Object responsible for transforming the data. params_true (pd.DataFrame): Dataframe with true parameters for the model. name_biomarkers (list[str]): List of biomarker names. name_covariates (list[str]): List of covariate names. scaler_cov: Scaler for the covariate values. scaler_y: Scaler for the y values. res (int, optional): Resolution for the plot. Default is 100. density (bool, optional): Whether to use density or not. Default is False. ncol_max (int, optional): Maximum number of columns for the plot. Default is 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: Figure: The created matplotlib figure. \"\"\" n_biomarker = len ( name_biomarkers ) n_covariate = len ( name_covariates ) n_row , n_col = n2mfrow ( n_biomarker , ncol_max ) cm = plt . colormaps [ \"Set1\" ] y_data = df [ name_biomarkers ] . values x_data = df . TIME . values + df . offsetT . values cov_dummy = np . array ( list ( itertools . product ([ 0 , 1 ], repeat = n_covariate ))) cov_dummy = np . repeat ( cov_dummy , res , axis = 0 ) cov_dummy_scaled = scaler_cov . transform ( cov_dummy ) x_model = np . linspace ( x_data . min (), x_data . max (), res ) input2 = np . tile ( x_model , 2 ** n_covariate ) . reshape ( - 1 , 1 ) input2 = np . concatenate (( input2 , cov_dummy_scaled ), axis = 1 ) y_model = scaler_y . inverse_transform ( sreft . model_y ( input2 )) name_covariates_true = [ i for i in params_true . columns if \"Covariate\" in i ] n_covariate_true = len ( name_covariates_true ) cov_dummy_true = np . array ( list ( itertools . product ([ 0 , 1 ], repeat = n_covariate_true ))) cov_dummy_true = np . repeat ( cov_dummy_true , res , axis = 0 ) fig , axs = plt . subplots ( n_row , n_col , figsize = ( n_col * 3 , n_row * 3 ), tight_layout = True , dpi = 300 , sharex = \"row\" , ) for k , ax in enumerate ( axs . flat ): if k >= n_biomarker : ax . axis ( \"off\" ) continue if density : x_ = x_data [ ~ np . isnan ( y_data [:, k ])] y_ = y_data [ ~ np . isnan ( y_data [:, k ]), k ] if np . var ( x_ ) == 0 : z = gaussian_kde ( y_ )( y_ ) else : xy = np . vstack ([ x_ , y_ ]) z = gaussian_kde ( xy )( xy ) idx = z . argsort () ax . scatter ( x_ [ idx ], y_ [ idx ], c = z [ idx ], s = 2 , label = \"_nolegend_\" ) else : ax . scatter ( x_data , y_data [:, k ], c = \"silver\" , s = 2 , label = \"_nolegend_\" ) pred_line = [] for i in range ( 2 ** n_covariate ): pred_line . extend ( ax . plot ( x_model , y_model [ res * i : ( res * i + res ), k ], c = cm ( i ), lw = 3 , ) ) true_line = [] for i in range ( 2 ** n_covariate_true ): y_true = model_sigmoid ( x_model , cov_dummy_true [ res * i : ( res * i + res )], params_true . loc [ k ], ) true_line . extend ( ax . plot ( x_model , y_true , c = cm ( i ), lw = 3 , ls = \"dashed\" , ) ) ax . set_xlabel ( \"Disease Time (year)\" ) ax . set_title ( name_biomarkers [ k ], fontsize = 15 ) if n_covariate > 0 : legend_labels = [ \", \" . join ( format ( i , f \"0 { n_covariate } b\" )) for i in range ( 2 ** n_covariate ) ] fig . legend ( handles = pred_line , loc = \"center\" , framealpha = 0 , bbox_to_anchor = ( 1.1 , 0.7 ), title = \"Pred \\n \" + \", \" . join ( name_covariates ), labels = legend_labels , ) legend_labels_true = [ \", \" . join ( format ( i , f \"0 { n_covariate_true } b\" )) for i in range ( 2 ** n_covariate_true ) ] fig . legend ( handles = true_line , loc = \"center\" , framealpha = 0 , bbox_to_anchor = ( 1.1 , 0.3 ), title = \"True \\n \" + \", \" . join ( name_covariates_true ), labels = legend_labels_true , ) if save_file_path : fig . savefig ( save_file_path , transparent = True , bbox_inches = \"tight\" ) return fig","title":"prediction_sim_plot()"},{"location":"reference/#sreftml.plots.residual_plot","text":"Generate a plot of residuals. Parameters: df ( DataFrame ) \u2013 Input Dataframe. This must contain offsetT, actual value of biomarkers and prediction value of biomarkers. name_biomarkers ( List [ str ] ) \u2013 List of biomarker names. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns. Default is 4. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure ( Figure ) \u2013 The created matplotlib figure. sreftml\\plots.py 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 def residual_plot ( df : pd . DataFrame , name_biomarkers : list [ str ], ncol_max : int = 4 , save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a plot of residuals. Args: df (pd.DataFrame): Input Dataframe. This must contain offsetT, actual value of biomarkers and prediction value of biomarkers. name_biomarkers (List[str]): List of biomarker names. ncol_max (int, optional): Maximum number of columns. Default is 4. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: Figure: The created matplotlib figure. \"\"\" if not \"offsetT\" in df . columns : warnings . warn ( \"offsetT does not exist in df. df must contain offsetT. Skip drawing residual plot.\" ) return None if not all ([ f \" { biomarker } _pred\" in df . columns for biomarker in name_biomarkers ]): warnings . warn ( \"Some of the prediction values are missing in df. df must contain prediction values of biomarkers. Skip drawing residual plot.\" ) return None n_biomarker = len ( name_biomarkers ) n_row , n_col = n2mfrow ( n_biomarker , ncol_max ) x_data = df . TIME . values + df . offsetT . values y_res = ( df [[ f \" { biomarker } _pred\" for biomarker in name_biomarkers ]] . values - df [ name_biomarkers ] . values ) fig , axs = plt . subplots ( n_row , n_col , figsize = ( n_col * 3 , n_row * 3 ), tight_layout = True , dpi = 300 ) for k , ax in enumerate ( axs . flat ): if k >= n_biomarker : ax . axis ( \"off\" ) continue ax . scatter ( x_data , y_res [:, k ], s = 2 ) ax . axhline ( 0 , c = \"black\" , ls = \"--\" ) ax . set_title ( name_biomarkers [ k ], fontsize = 15 ) ax . set_xlabel ( \"Disease Time (year)\" ) ax . set_ylabel ( \"y_pred - y_obs\" ) if save_file_path is not None : fig . savefig ( save_file_path , transparent = True ) return fig","title":"residual_plot()"},{"location":"reference/#sreftml.plots.scatter_matrix_plot","text":"Plot correlation matrix. Parameters: df ( DataFrame ) \u2013 Input DataFrame. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: PairGrid \u2013 sns.axisgrid.PairGrid: PairGrid object with the correlation plot. sreftml\\plots.py 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 def scatter_matrix_plot ( df : pd . DataFrame , save_file_path : str | None = None ) -> sns . axisgrid . PairGrid : \"\"\" Plot correlation matrix. Args: df (pd.DataFrame): Input DataFrame. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.PairGrid: PairGrid object with the correlation plot. \"\"\" def corrfunc ( x , y , ** kwds ): ax = plt . gca () ax . tick_params ( bottom = False , top = False , left = False , right = False ) sns . despine ( ax = ax , bottom = True , top = True , left = True , right = True ) r = x . corr ( y , method = \"pearson\" ) norm = plt . Normalize ( - 1 , 1 ) facecolor = plt . get_cmap ( \"seismic\" )( norm ( r )) ax . set_facecolor ( facecolor ) ax . set_alpha ( 0 ) lightness = ( max ( facecolor [: 3 ]) + min ( facecolor [: 3 ])) / 2 ax . annotate ( f \" { r : .2f } \" , xy = ( 0.5 , 0.5 ), xycoords = ax . transAxes , color = \"white\" if lightness < 0.7 else \"black\" , size = 26 , ha = \"center\" , va = \"center\" , ) g = sns . PairGrid ( df ) g . map_diag ( sns . histplot , kde = False ) g . map_lower ( plt . scatter , s = 2 ) g . map_upper ( corrfunc ) g . figure . tight_layout () if save_file_path : g . savefig ( save_file_path ) return g","title":"scatter_matrix_plot()"},{"location":"reference/#sreftml.plots.single_panel_scatter_plot","text":"Draw a scatter plot using a single panel. Parameters: df ( DataFrame ) \u2013 Input DataFrame. x_col ( str ) \u2013 X-axis column in df. y_col ( str ) \u2013 Y-axis column in df. hue ( str | None , default: None ) \u2013 Column to stratify the plot. Defaults to None. duplicate_key ( list [ str ] | str | None , default: None ) \u2013 Specify the column name(s) from which duplicates are to be removed. Defaults to None. density ( bool , default: False ) \u2013 Whether to plot density. Defaults to False. identity ( bool , default: False ) \u2013 Whether to plot identity line. Defaults to False. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: FacetGrid \u2013 sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. sreftml\\plots.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 def single_panel_scatter_plot ( df : pd . DataFrame , x_col : str , y_col : str , hue : str | None = None , duplicate_key : list [ str ] | str | None = None , density : bool = False , identity : bool = False , save_file_path : str | None = None , ) -> sns . axisgrid . FacetGrid : \"\"\" Draw a scatter plot using a single panel. Args: df (pd.DataFrame): Input DataFrame. x_col (str): X-axis column in df. y_col (str): Y-axis column in df. hue (str | None, optional): Column to stratify the plot. Defaults to None. duplicate_key (list[str] | str | None, optional): Specify the column name(s) from which duplicates are to be removed. Defaults to None. density (bool, optional): Whether to plot density. Defaults to False. identity (bool, optional): Whether to plot identity line. Defaults to False. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: sns.axisgrid.FacetGrid: FacetGrid object with the scatter plot. \"\"\" if density : hue = None warnings . warn ( \"Since density is True, the hue option is ignored.\" ) if hue : df_ = clean_duplicate ( df , [ x_col , y_col , hue ], duplicate_key ) unique_hues = np . sort ( df_ [ hue ] . unique ()) line_kws_ = None else : df_ = clean_duplicate ( df , [ x_col , y_col ], duplicate_key ) unique_hues = [ None ] line_kws_ = { \"color\" : \"red\" } scatter_kws_ = { \"alpha\" : 0.5 , \"s\" : 20 , \"edgecolor\" : \"none\" } if density : xy = df_ [[ x_col , y_col ]] . values . T z = gaussian_kde ( xy )( xy ) scatter_kws_ . update ({ \"c\" : z , \"color\" : None , \"cmap\" : \"viridis\" }) g = sns . lmplot ( data = df_ , x = x_col , y = y_col , hue = hue , hue_order = unique_hues , scatter_kws = scatter_kws_ , line_kws = line_kws_ , ) g . figure . set_dpi ( 300 ) if identity : if df [ y_col ] . max () < df [ x_col ] . min () or df [ x_col ] . max () < df [ y_col ] . min (): warnings . warn ( f \"The data range of { x_col } and { y_col } is not covered, although idenntity=True. Skip drawing of identity line.\" ) else : min_ = df [[ x_col , y_col ]] . min () . max () max_ = df [[ x_col , y_col ]] . max () . min () g . axes [ 0 , 0 ] . plot ([ min_ , max_ ], [ min_ , max_ ], \"k--\" ) if hue : g . axes [ 0 , 0 ] . legend ( [ \"_nolegend_\" , \"dummy text\" , \"_nolegned_\" ] * len ( unique_hues ) ) for idx , h in enumerate ( unique_hues ): df_hue = df_ . loc [ df_ [ hue ] == h ] label_line = get_regression_line_label ( df_hue [ x_col ], df_hue [ y_col ]) g . axes [ 0 , 0 ] . get_legend () . get_texts ()[ idx ] . set_text ( label_line ) else : label_line = get_regression_line_label ( df_ [ x_col ], df_ [ y_col ]) g . axes [ 0 , 0 ] . legend ( labels = [ \"_nolegend_\" , label_line ]) if save_file_path is not None : plt . savefig ( save_file_path , transparent = True , dpi = 300 ) return g","title":"single_panel_scatter_plot()"},{"location":"reference/#sreftml.plots.var_y_plot","text":"Generate a plot of var_y. Parameters: sreft ( Model ) \u2013 Object responsible for transforming the data. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. save_file_path ( str , default: None ) \u2013 The path where the plot will be saved. Default to None. Returns: Figure \u2013 plt.Figure: The plotted figure. sreftml\\plots.py 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 def var_y_plot ( sreft : tf . keras . Model , name_biomarkers : list [ str ], save_file_path : str | None = None , ) -> plt . Figure : \"\"\" Generate a plot of var_y. Args: sreft (tf.keras.Model): Object responsible for transforming the data. name_biomarkers (list[str]): List of biomarker names. save_file_path (str, optional): The path where the plot will be saved. Default to None. Returns: plt.Figure: The plotted figure. \"\"\" rank = np . argsort ( np . exp ( sreft . lnvar_y )) fig = plt . figure ( dpi = 300 , tight_layout = True ) plt . barh ([ name_biomarkers [ i ] for i in rank ], np . exp ( sreft . lnvar_y )[ rank ]) plt . gca () . invert_yaxis () plt . xlabel ( \"var_y\" ) if save_file_path : plt . savefig ( save_file_path , transparent = True ) return fig","title":"var_y_plot()"},{"location":"reference/#sreftml.sreftml_model.SReFT","text":"Bases: Model A model class that extends tf.keras.Model for SReFT_ML. Attributes: activation ( str ) \u2013 The activation function to use. activation_offsetT ( str ) \u2013 The activation function for offsetT. output_dim ( int ) \u2013 The dimension of the output. latent_dim ( int ) \u2013 The dimension of the latent variable. offsetT_min ( float ) \u2013 The minimum value of offsetT. offsetT_max ( float ) \u2013 The maximum value of offsetT. lnvar_y ( Variable ) \u2013 The lnvar_y variable. model_1 ( Sequential ) \u2013 A keras model for estimating offsetT. model_y ( Sequential ) \u2013 A keras model for estimating prediction. Source code in sreftml\\sreftml_model.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 class SReFT ( tf . keras . Model ): \"\"\" A model class that extends tf.keras.Model for SReFT_ML. Attributes: activation (str): The activation function to use. activation_offsetT (str): The activation function for offsetT. output_dim (int): The dimension of the output. latent_dim (int): The dimension of the latent variable. offsetT_min (float): The minimum value of offsetT. offsetT_max (float): The maximum value of offsetT. lnvar_y (tf.Variable): The lnvar_y variable. model_1 (tf.keras.Sequential): A keras model for estimating offsetT. model_y (tf.keras.Sequential): A keras model for estimating prediction. \"\"\" def __init__ ( self , output_dim : int , latent_dim_model_1 : int , latent_dim_model_y : int , activation_model_1_mid : str = \"sigmoid\" , activation_model_1_out : str = \"softplus\" , activation_model_y_mid : str = \"tanh\" , offsetT_min : float = - np . inf , offsetT_max : float = np . inf , random_state : int | None = None , ) -> None : \"\"\" Initialize a new instance of SReFT_ML. Args: output_dim (int, optional): The dimension of the output. Defaults to 4. latent_dim_model_1 (int): The dimension of the latent dimention of model_1. latent_dim_model_1 (int): The dimension of the latent dimention of model_y. activation_model_1_mid (str, optional): The activation function to use. Defaults to \"sigmoid\". activation_model_1_out (str, optional): The activation function to use. Defaults to \"softplus\". activation_model_y_mid (str, optional): The activation function to use. Defaults to \"tanh\". offsetT_min (float, optional): The minimum value of offsetT. Defaults to -np.inf. offsetT_max (float, optional): The maximum value of offsetT. Defaults to np.inf. random_state (int | None, optional): The seed for random number generation. Defaults to None. \"\"\" super ( SReFT , self ) . __init__ () initializer = tf . keras . initializers . GlorotUniform ( seed = random_state ) tf . random . set_seed ( random_state ) self . output_dim = int ( output_dim ) self . latent_dim_model_1 = int ( latent_dim_model_1 ) self . latent_dim_model_y = int ( latent_dim_model_y ) self . activation_model_1_mid = activation_model_1_mid self . activation_model_1_out = activation_model_1_out self . activation_model_y_mid = activation_model_y_mid self . offsetT_min = offsetT_min self . offsetT_max = offsetT_max self . lnvar_y = tf . Variable ( tf . zeros ( self . output_dim )) self . model_1 = tf . keras . Sequential ( name = \"estimate_offsetT\" ) self . model_1 . add ( tf . keras . layers . Dense ( self . latent_dim_model_1 , activation = self . activation_model_1_mid , kernel_initializer = initializer , ) ) self . model_1 . add ( tf . keras . layers . Dense ( 1 , activation = self . activation_model_1_out , kernel_initializer = initializer , ) ) self . model_y = tf . keras . Sequential ( name = \"estimate_prediction\" ) self . model_y . add ( tf . keras . layers . Dense ( self . latent_dim_model_y , activation = self . activation_model_y_mid , kernel_initializer = initializer , ) ) self . model_y . add ( tf . keras . layers . Dense ( self . output_dim , activation = None , kernel_initializer = initializer ) ) def call ( self , inputs : tuple [ np . ndarray , np . ndarray , np . ndarray , np . ndarray ], training : bool = False , ** kwargs , ) -> tf . Tensor : \"\"\" Call the model with the given inputs. Args: inputs (tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]): The inputs for the model. training (bool, optional): Whether the model is in training mode. Defaults to False. Returns: tf.Tensor: The predicted y values. :param **kwargs: \"\"\" ( input_x , input_cov , input_m , input_y ) = inputs input1 = tf . concat (( input_m , input_cov ), axis =- 1 , name = \"concat\" ) offset = self . model_1 ( input1 , training = training ) offset = tf . clip_by_value ( offset , self . offsetT_min , self . offsetT_max , name = \"clip\" ) dis_time = tf . add ( input_x , offset , name = \"add\" ) input2 = tf . concat (( dis_time , input_cov ), axis =- 1 , name = \"concat\" ) y_pred = self . model_y ( input2 , training = training ) obj = utilities . tf_compute_negative_log_likelihood ( input_y , y_pred , self . lnvar_y ) self . add_loss ( tf . reduce_sum ( obj )) self . add_metric ( tf . reduce_mean ( obj ), name = \"loss\" ) return y_pred def build_graph ( self , shapes : tuple [ int , int , int , int ]) -> tf . keras . Model : \"\"\" Build the computational graph for the model. Args: shapes (tuple[int, int, int, int]): The shapes of the inputs. Returns: tf.keras.Model: The model with the built computational graph. \"\"\" input_x = tf . keras . layers . Input ( shape = shapes [ 0 ], name = \"time\" ) input_cov = tf . keras . layers . Input ( shape = shapes [ 1 ], name = \"covariate\" ) input_m = tf . keras . layers . Input ( shape = shapes [ 2 ], name = \"feature\" ) input_y = tf . keras . layers . Input ( shape = shapes [ 3 ], name = \"observation\" ) return tf . keras . Model ( inputs = [ input_x , input_cov , input_m ], outputs = self . call (( input_x , input_cov , input_m , input_y )), )","title":"SReFT"},{"location":"reference/#sreftml.sreftml_model.SReFT.__init__","text":"Initialize a new instance of SReFT_ML. Parameters: output_dim ( int ) \u2013 The dimension of the output. Defaults to 4. latent_dim_model_1 ( int ) \u2013 The dimension of the latent dimention of model_1. latent_dim_model_1 ( int ) \u2013 The dimension of the latent dimention of model_y. activation_model_1_mid ( str , default: 'sigmoid' ) \u2013 The activation function to use. Defaults to \"sigmoid\". activation_model_1_out ( str , default: 'softplus' ) \u2013 The activation function to use. Defaults to \"softplus\". activation_model_y_mid ( str , default: 'tanh' ) \u2013 The activation function to use. Defaults to \"tanh\". offsetT_min ( float , default: - inf ) \u2013 The minimum value of offsetT. Defaults to -np.inf. offsetT_max ( float , default: inf ) \u2013 The maximum value of offsetT. Defaults to np.inf. random_state ( int | None , default: None ) \u2013 The seed for random number generation. Defaults to None. sreftml\\sreftml_model.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def __init__ ( self , output_dim : int , latent_dim_model_1 : int , latent_dim_model_y : int , activation_model_1_mid : str = \"sigmoid\" , activation_model_1_out : str = \"softplus\" , activation_model_y_mid : str = \"tanh\" , offsetT_min : float = - np . inf , offsetT_max : float = np . inf , random_state : int | None = None , ) -> None : \"\"\" Initialize a new instance of SReFT_ML. Args: output_dim (int, optional): The dimension of the output. Defaults to 4. latent_dim_model_1 (int): The dimension of the latent dimention of model_1. latent_dim_model_1 (int): The dimension of the latent dimention of model_y. activation_model_1_mid (str, optional): The activation function to use. Defaults to \"sigmoid\". activation_model_1_out (str, optional): The activation function to use. Defaults to \"softplus\". activation_model_y_mid (str, optional): The activation function to use. Defaults to \"tanh\". offsetT_min (float, optional): The minimum value of offsetT. Defaults to -np.inf. offsetT_max (float, optional): The maximum value of offsetT. Defaults to np.inf. random_state (int | None, optional): The seed for random number generation. Defaults to None. \"\"\" super ( SReFT , self ) . __init__ () initializer = tf . keras . initializers . GlorotUniform ( seed = random_state ) tf . random . set_seed ( random_state ) self . output_dim = int ( output_dim ) self . latent_dim_model_1 = int ( latent_dim_model_1 ) self . latent_dim_model_y = int ( latent_dim_model_y ) self . activation_model_1_mid = activation_model_1_mid self . activation_model_1_out = activation_model_1_out self . activation_model_y_mid = activation_model_y_mid self . offsetT_min = offsetT_min self . offsetT_max = offsetT_max self . lnvar_y = tf . Variable ( tf . zeros ( self . output_dim )) self . model_1 = tf . keras . Sequential ( name = \"estimate_offsetT\" ) self . model_1 . add ( tf . keras . layers . Dense ( self . latent_dim_model_1 , activation = self . activation_model_1_mid , kernel_initializer = initializer , ) ) self . model_1 . add ( tf . keras . layers . Dense ( 1 , activation = self . activation_model_1_out , kernel_initializer = initializer , ) ) self . model_y = tf . keras . Sequential ( name = \"estimate_prediction\" ) self . model_y . add ( tf . keras . layers . Dense ( self . latent_dim_model_y , activation = self . activation_model_y_mid , kernel_initializer = initializer , ) ) self . model_y . add ( tf . keras . layers . Dense ( self . output_dim , activation = None , kernel_initializer = initializer ) )","title":"__init__()"},{"location":"reference/#sreftml.sreftml_model.SReFT.build_graph","text":"Build the computational graph for the model. Parameters: shapes ( tuple [ int , int , int , int ] ) \u2013 The shapes of the inputs. Returns: Model \u2013 tf.keras.Model: The model with the built computational graph. sreftml\\sreftml_model.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 def build_graph ( self , shapes : tuple [ int , int , int , int ]) -> tf . keras . Model : \"\"\" Build the computational graph for the model. Args: shapes (tuple[int, int, int, int]): The shapes of the inputs. Returns: tf.keras.Model: The model with the built computational graph. \"\"\" input_x = tf . keras . layers . Input ( shape = shapes [ 0 ], name = \"time\" ) input_cov = tf . keras . layers . Input ( shape = shapes [ 1 ], name = \"covariate\" ) input_m = tf . keras . layers . Input ( shape = shapes [ 2 ], name = \"feature\" ) input_y = tf . keras . layers . Input ( shape = shapes [ 3 ], name = \"observation\" ) return tf . keras . Model ( inputs = [ input_x , input_cov , input_m ], outputs = self . call (( input_x , input_cov , input_m , input_y )), )","title":"build_graph()"},{"location":"reference/#sreftml.sreftml_model.SReFT.call","text":"Call the model with the given inputs. Parameters: inputs ( tuple [ ndarray , ndarray , ndarray , ndarray ] ) \u2013 The inputs for the model. training ( bool , default: False ) \u2013 Whether the model is in training mode. Defaults to False. Returns: Tensor \u2013 tf.Tensor: The predicted y values. Tensor \u2013 param **kwargs: sreftml\\sreftml_model.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def call ( self , inputs : tuple [ np . ndarray , np . ndarray , np . ndarray , np . ndarray ], training : bool = False , ** kwargs , ) -> tf . Tensor : \"\"\" Call the model with the given inputs. Args: inputs (tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]): The inputs for the model. training (bool, optional): Whether the model is in training mode. Defaults to False. Returns: tf.Tensor: The predicted y values. :param **kwargs: \"\"\" ( input_x , input_cov , input_m , input_y ) = inputs input1 = tf . concat (( input_m , input_cov ), axis =- 1 , name = \"concat\" ) offset = self . model_1 ( input1 , training = training ) offset = tf . clip_by_value ( offset , self . offsetT_min , self . offsetT_max , name = \"clip\" ) dis_time = tf . add ( input_x , offset , name = \"add\" ) input2 = tf . concat (( dis_time , input_cov ), axis =- 1 , name = \"concat\" ) y_pred = self . model_y ( input2 , training = training ) obj = utilities . tf_compute_negative_log_likelihood ( input_y , y_pred , self . lnvar_y ) self . add_loss ( tf . reduce_sum ( obj )) self . add_metric ( tf . reduce_mean ( obj ), name = \"loss\" ) return y_pred","title":"call()"},{"location":"reference/#sreftml.sreftml_model.hp_search_for_sreftml","text":"Perform hyperparameter search for the SReFT_ML. Parameters: df ( DataFrame ) \u2013 Input dataframe containing the data. scaled_features ( tuple ) \u2013 Tuple of scaled feature. Pass x, cov, m and y in that order. grid_dict ( dict [ list [ any ]] ) \u2013 Dictionary of hyperparameter names and the corresponding values to be tested. n_grid_sample ( int , default: 0 ) \u2013 Number of samples to select randomly from the grid. Greater than 0 for random search and 0 or less for grid search. Default to 0. n_splits ( int , default: 3 ) \u2013 Number of splits for cross-validation. 2 or more is required. Default to 3. random_seed ( int , default: 42 ) \u2013 Random seed for reproducibility. Default to 42. callbacks ( list [ any ] | None , default: None ) \u2013 Callbacks to be used during model training. Default to None. epochs ( int , default: 9999 ) \u2013 Specifies the number of epochs to pass to the SReFT class. Defaults to 9999. batch_size ( int , default: 256 ) \u2013 Default to 256. Returns: DataFrame \u2013 pd.DataFrame: Dataframe containing the hyperparameters and corresponding scores. sreftml\\sreftml_model.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def hp_search_for_sreftml ( df : pd . DataFrame , scaled_features : tuple , grid_dict : dict [ list [ any ]], n_grid_sample : int = 0 , n_splits : int = 3 , random_seed : int = 42 , callbacks : list [ any ] | None = None , epochs : int = 9999 , batch_size : int = 256 , ) -> pd . DataFrame : \"\"\" Perform hyperparameter search for the SReFT_ML. Args: df (pd.DataFrame): Input dataframe containing the data. scaled_features (tuple): Tuple of scaled feature. Pass x, cov, m and y in that order. grid_dict (dict[list[any]]): Dictionary of hyperparameter names and the corresponding values to be tested. n_grid_sample (int, optional): Number of samples to select randomly from the grid. Greater than 0 for random search and 0 or less for grid search. Default to 0. n_splits (int, optional): Number of splits for cross-validation. 2 or more is required. Default to 3. random_seed (int, optional): Random seed for reproducibility. Default to 42. callbacks (list[any] | None, optional): Callbacks to be used during model training. Default to None. epochs (int, optional): Specifies the number of epochs to pass to the SReFT class. Defaults to 9999. batch_size (int, optional): Default to 256. Returns: pd.DataFrame: Dataframe containing the hyperparameters and corresponding scores. \"\"\" grid_prms = [ i for i in itertools . product ( * grid_dict . values ())] df_grid = pd . DataFrame ( grid_prms , columns = grid_dict . keys ()) if n_grid_sample > 0 : df_grid = df_grid . sample ( min ( int ( n_grid_sample ), len ( df_grid ))) x_scaled , cov_scaled , m_scaled , y_scaled = scaled_features scores = [] gkf = GroupKFold ( n_splits = n_splits ) for i , ( tmp_train_idx , tmp_vali_idx ) in enumerate ( gkf . split ( X = df , groups = df . ID )): for tmp_grid , grid_items in df_grid . iterrows (): current_iter = i * len ( df_grid ) + ( tmp_grid + 1 ) current_hp = \", \" . join ([ f \" { j } : { grid_items [ j ] } \" for j in grid_items . keys ()]) print ( f \" \\n ( { current_iter } / { n_splits * len ( df_grid ) } ) { current_hp } -----\" ) tmp_sreft = SReFT ( output_dim = y_scaled . shape [ 1 ], latent_dim_model_1 = m_scaled . shape [ 1 ], latent_dim_model_y = y_scaled . shape [ 1 ], activation_model_1_mid = grid_items [ \"activation_model_1_mid\" ], activation_model_1_out = grid_items [ \"activation_model_1_out\" ], activation_model_y_mid = grid_items [ \"activation_model_y_mid\" ], random_state = random_seed , ) tmp_sreft . compile ( optimizer = tf . keras . optimizers . Adam ( grid_items [ \"adam_lr\" ])) tmp_sreft . fit ( ( x_scaled [ tmp_train_idx , :], cov_scaled [ tmp_train_idx , :], m_scaled [ tmp_train_idx , :], y_scaled [ tmp_train_idx , :], ), y_scaled [ tmp_train_idx , :], validation_data = ( ( x_scaled [ tmp_vali_idx , :], cov_scaled [ tmp_vali_idx , :], m_scaled [ tmp_vali_idx , :], y_scaled [ tmp_vali_idx , :], ), y_scaled [ tmp_vali_idx , :], ), batch_size = batch_size , epochs = epochs , verbose = 0 , callbacks = callbacks , ) y_pred = tmp_sreft ( ( x_scaled [ tmp_vali_idx , :], cov_scaled [ tmp_vali_idx , :], m_scaled [ tmp_vali_idx , :], y_scaled [ tmp_vali_idx , :], ) ) temp_score = utilities . np_compute_negative_log_likelihood ( y_scaled [ tmp_vali_idx , :], y_pred , tmp_sreft . lnvar_y ) scores . append ( np . nanmean ( temp_score )) df_grid [ \"score\" ] = np . array ( scores ) . reshape ( n_splits , - 1 ) . mean ( axis = 0 ) . round ( 3 ) return df_grid","title":"hp_search_for_sreftml()"},{"location":"reference/#sreftml.utilities.calculate_offsetT_prediction","text":"Calculate offsetT and prediction value of biomarkers. Parameters: sreft ( Model ) \u2013 The trained SReFT model. df ( DataFrame ) \u2013 The input DataFrame. scaled_features ( tuple [ ndarray , ndarray , ndarray , ndarray ] ) \u2013 The scaled features. Pass x, cov, m, and y in that order. scaler_y ( StanderdScaler ) \u2013 The scaler for y. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. Returns: DataFrame \u2013 pd.DataFrame: The DataFrame including the columns of the input DataFrame, offsetT and the prediction values. sreftml\\utilities.py 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 def calculate_offsetT_prediction ( sreft : tf . keras . Model , df : pd . DataFrame , scaled_features : tuple [ np . ndarray , np . ndarray , np . ndarray , np . ndarray ], scaler_y : sp . StandardScaler , name_biomarkers : list [ str ], ) -> pd . DataFrame : \"\"\" Calculate offsetT and prediction value of biomarkers. Args: sreft (tf.keras.Model): The trained SReFT model. df (pd.DataFrame): The input DataFrame. scaled_features (tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]): The scaled features. Pass x, cov, m, and y in that order. scaler_y (sp.StanderdScaler): The scaler for y. name_biomarkers (list[str]): List of biomarker names. Returns: pd.DataFrame: The DataFrame including the columns of the input DataFrame, offsetT and the prediction values. \"\"\" df_ = df . copy () x_scaled , cov_scaled , m_scaled , y_scaled = scaled_features offsetT = sreft . model_1 ( np . concatenate (( m_scaled , cov_scaled ), axis =- 1 )) y_pred = pd . DataFrame ( scaler_y . inverse_transform ( sreft ( scaled_features )), columns = [ f \" { biomarker } _pred\" for biomarker in name_biomarkers ], ) df_ = df_ . assign ( offsetT = offsetT , ** y_pred ) return df_","title":"calculate_offsetT_prediction()"},{"location":"reference/#sreftml.utilities.clean_duplicate","text":"Checks for duplicate entries in the DataFrame based on the specified columns and removes NaNs; also removes duplicate entries if a subset is specified. Parameters: df ( DataFrame ) \u2013 The DataFrame to check and drop duplicates from. cols ( list [ str ] ) \u2013 List of column names to check (and remove) for duplicates. duplicate_key ( list [ str ] | str | None ) \u2013 If specify, duplicate deletion will be performed. Then, check duplicate within sepecified columns. Returns: DataFrame \u2013 pd.DataFrame: DataFrame with duplicates removed. It includes only the columns specified in cols and duplicate_key. Warns: The warning message depends on the `subset` parameter \u2013 sreftml\\utilities.py 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 def clean_duplicate ( df : pd . DataFrame , cols : list [ str ], duplicate_key : list [ str ] | str | None ) -> pd . DataFrame : \"\"\" Checks for duplicate entries in the DataFrame based on the specified columns and removes NaNs; also removes duplicate entries if a subset is specified. Parameters: df (pd.DataFrame): The DataFrame to check and drop duplicates from. cols (list[str]): List of column names to check (and remove) for duplicates. duplicate_key (list[str] | str | None): If specify, duplicate deletion will be performed. Then, check duplicate within sepecified columns. Returns: pd.DataFrame: DataFrame with duplicates removed. It includes only the columns specified in cols and duplicate_key. Warnings: If any duplicates are found in the DataFrame after cleaning, a warning message is displayed. The warning message depends on the `subset` parameter: - If `subset` is None, the warning message indicates that some records are duplicates across all columns in `cols`. - If `subset` is not None, the warning message indicates that some records are duplicates within the same subset. \"\"\" if type ( duplicate_key ) is str : duplicate_key = [ duplicate_key ] if duplicate_key is None : df_ = df [ cols ] . dropna () if df_ . duplicated () . any (): warnings . warn ( \"Some records are duplicates. Set duplicate_key if necessary.\" ) else : df_ = df [ cols + duplicate_key ] . dropna () . drop_duplicates () if df_ . duplicated ( subset = duplicate_key ) . any (): warnings . warn ( \"Duplicate records remain in some duplicate_keys. Add duplicate_key if necessary.\" ) return df_","title":"clean_duplicate()"},{"location":"reference/#sreftml.utilities.compute_permutation_importance","text":"Compute permutation importance of the model. Parameters: random_seed ( int ) \u2013 The seed for the random number generator. sreft ( Model ) \u2013 The model for which to calculate permutation importance. x_test ( ndarray ) \u2013 The x test data. cov_test ( ndarray ) \u2013 The covariates test data. m_test ( ndarray ) \u2013 The m test data. y_test ( ndarray ) \u2013 The y test data. n_sample ( int ) \u2013 The number of samples. Returns: tuple [ ndarray , ndarray ] \u2013 tuple[np.ndarray, np.ndarray]: The mean and standard deviation of the permutation importance. sreftml\\utilities.py 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 def compute_permutation_importance ( random_seed : int , sreft : tf . keras . Model , x_test : np . ndarray , cov_test : np . ndarray , m_test : np . ndarray , y_test : np . ndarray , n_sample : int , ) -> tuple [ np . ndarray , np . ndarray ]: \"\"\" Compute permutation importance of the model. Args: random_seed (int): The seed for the random number generator. sreft (tf.keras.Model): The model for which to calculate permutation importance. x_test (np.ndarray): The x test data. cov_test (np.ndarray): The covariates test data. m_test (np.ndarray): The m test data. y_test (np.ndarray): The y test data. n_sample (int): The number of samples. Returns: tuple[np.ndarray, np.ndarray]: The mean and standard deviation of the permutation importance. \"\"\" rng = np . random . default_rng ( random_seed ) y_pred = sreft (( x_test , cov_test , m_test , y_test )) . numpy () neglls_orig = np_compute_negative_log_likelihood ( y_test , y_pred , sreft . lnvar_y ) mean_pi = [] std_pi = [] n_pi = m_test . shape [ 1 ] + cov_test . shape [ 1 ] for i in range ( n_pi ): pis = [] for j in range ( n_sample ): if i < m_test . shape [ 1 ]: m_test_rand = np . copy ( m_test ) rng . shuffle ( m_test_rand [:, i ]) y_pred_rand = sreft (( x_test , cov_test , m_test_rand , y_test )) . numpy () else : cov_test_rand = np . copy ( cov_test ) rng . shuffle ( cov_test_rand [:, i - m_test . shape [ 1 ]]) y_pred_rand = sreft (( x_test , cov_test_rand , m_test , y_test )) . numpy () neglls_rand = np_compute_negative_log_likelihood ( y_test , y_pred_rand , sreft . lnvar_y ) nglls_diff = neglls_rand - neglls_orig temp_pi = np . nanmean ( nglls_diff ) pis . append ( temp_pi ) mean_pi . append ( np . mean ( pis )) std_pi . append ( np . std ( pis )) return np . array ( mean_pi ), np . array ( std_pi )","title":"compute_permutation_importance()"},{"location":"reference/#sreftml.utilities.get_current_commit_hash","text":"Retrieves the current commit hash of the git repository. Returns: str ( str ) \u2013 The current commit hash or a placeholder string if an error occurs. sreftml\\utilities.py 238 239 240 241 242 243 244 245 246 247 248 249 250 def get_current_commit_hash () -> str : \"\"\" Retrieves the current commit hash of the git repository. Returns: str: The current commit hash or a placeholder string if an error occurs. \"\"\" try : commit_hash = subprocess . check_output ([ \"git\" , \"rev-parse\" , \"HEAD\" ]) return commit_hash . strip () . decode ( \"utf-8\" ) except subprocess . CalledProcessError : warnings . warn ( \"Could not get the current commit hash.\" , UserWarning ) return \"commit_hash_not_available\"","title":"get_current_commit_hash()"},{"location":"reference/#sreftml.utilities.linear_regression_each_subject","text":"Perform linear regression for each subject (ID) in the given DataFrame. Parameters: df ( DataFrame ) \u2013 The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns ( list [ str ] ) \u2013 A list of column names (strings) representing the target variables to be regressed. Returns: DataFrame \u2013 pd.DataFrame: A DataFrame with the regression results for each subject. sreftml\\utilities.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def linear_regression_each_subject ( df : pd . DataFrame , y_columns : list [ str ] ) -> pd . DataFrame : \"\"\" Perform linear regression for each subject (ID) in the given DataFrame. Args: df (pd.DataFrame): The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns (list[str]): A list of column names (strings) representing the target variables to be regressed. Returns: pd.DataFrame: A DataFrame with the regression results for each subject. \"\"\" model = LinearRegression () results = { \"ID\" : df . ID . unique ()} for y in y_columns : slopes = [] intercepts = [] for _ , group in df . groupby ( \"ID\" ): x_values = group [ \"TIME\" ] . values . reshape ( - 1 , 1 ) y_values = group [ y ] . values valid_mask = ~ np . isnan ( y_values ) valid_sample_count = valid_mask . sum () if valid_sample_count == 0 : slopes . append ( np . nan ) intercepts . append ( np . nan ) continue model . fit ( x_values [ valid_mask ], y_values [ valid_mask ]) if valid_sample_count == 1 : slopes . append ( np . nan ) else : slopes . append ( model . coef_ [ 0 ]) intercepts . append ( model . intercept_ ) results [ f \" { y } _slope\" ] = slopes results [ f \" { y } _intercept\" ] = intercepts result = pd . DataFrame ( results ) result = result [ [ \"ID\" ] + [ i + j for j in [ \"_slope\" , \"_intercept\" ] for i in y_columns ] ] return result","title":"linear_regression_each_subject()"},{"location":"reference/#sreftml.utilities.mixed_effect_linear_regression","text":"Perform mixed-effects linear regression on the given DataFrame. Parameters: df ( DataFrame ) \u2013 The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns ( list [ str ] ) \u2013 A list of column names (strings) representing the target variables to be regressed. Returns: tuple ( tuple [ DataFrame , list ] ) \u2013 A tuple containing two elements: - result (pd.DataFrame): The DataFrame with the fitted regression parameters for each individual. - models (list): A list of fitted mixed-effects regression models for each target variable. sreftml\\utilities.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def mixed_effect_linear_regression ( df : pd . DataFrame , y_columns : list [ str ] ) -> tuple [ pd . DataFrame , list ]: \"\"\" Perform mixed-effects linear regression on the given DataFrame. Args: df (pd.DataFrame): The input DataFrame containing the data for the regression. It must include columns for 'ID', 'TIME', and the target variables specified in 'y_columns'. y_columns (list[str]): A list of column names (strings) representing the target variables to be regressed. Returns: tuple: A tuple containing two elements: - result (pd.DataFrame): The DataFrame with the fitted regression parameters for each individual. - models (list): A list of fitted mixed-effects regression models for each target variable. \"\"\" result = pd . DataFrame ( df . ID . unique ()) . set_axis ([ \"ID\" ], axis = 1 ) models = [] for y in y_columns : df_ = ( df [[ \"ID\" , \"TIME\" , y ]] . dropna () . reset_index ( drop = True ) . set_axis ([ \"ID\" , \"TIME\" , \"TARGET\" ], axis = 1 ) ) full_model = smf . mixedlm ( \"TARGET ~ TIME\" , data = df_ , groups = \"ID\" , re_formula = \"~TIME\" ) . fit () random_effects = pd . DataFrame ( full_model . random_effects ) . T . values params_pop = full_model . params [ 0 : 2 ] . values . T params_ind = pd . DataFrame ( params_pop + random_effects ) . set_axis ( [ f \" { y } _intercept\" , f \" { y } _slope\" ], axis = 1 ) params_ind [ \"ID\" ] = pd . DataFrame ( full_model . random_effects ) . T . index . values result = result . merge ( params_ind , how = \"outer\" ) models . append ( full_model ) result = result [ [ \"ID\" ] + [ i + j for j in [ \"_slope\" , \"_intercept\" ] for i in y_columns ] ] return result , models","title":"mixed_effect_linear_regression()"},{"location":"reference/#sreftml.utilities.n2mfrow","text":"Determines the number of rows and columns required to plot a given number of subplots. Parameters: n_plots ( int ) \u2013 Total number of subplots. ncol_max ( int , default: 4 ) \u2013 Maximum number of columns for subplots. Defaults to 4. Returns: tuple ( tuple [ int , int ] ) \u2013 (number of rows, number of columns) sreftml\\utilities.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def n2mfrow ( n_plots : int , ncol_max : int = 4 ) -> tuple [ int , int ]: \"\"\" Determines the number of rows and columns required to plot a given number of subplots. Args: n_plots (int): Total number of subplots. ncol_max (int, optional): Maximum number of columns for subplots. Defaults to 4. Returns: tuple: (number of rows, number of columns)\"\"\" n_plots = int ( n_plots ) nrow = math . ceil ( n_plots / ncol_max ) ncol = math . ceil ( n_plots / nrow ) return nrow , ncol","title":"n2mfrow()"},{"location":"reference/#sreftml.utilities.np_compute_negative_log_likelihood","text":"Computes the negative log likelihood between true and predicted values using numpy. Parameters: y_true ( array ) \u2013 True target values. y_pred ( array ) \u2013 Predicted target values. lnvar_y ( array ) \u2013 Natural logarithm of the variance. Returns: ndarray \u2013 np.array: The negative log likelihood for each instance. sreftml\\utilities.py 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 def np_compute_negative_log_likelihood ( y_true : np . ndarray , y_pred : np . ndarray , lnvar_y : np . ndarray ) -> np . ndarray : \"\"\" Computes the negative log likelihood between true and predicted values using numpy. Args: y_true (np.array): True target values. y_pred (np.array): Predicted target values. lnvar_y (np.array): Natural logarithm of the variance. Returns: np.array: The negative log likelihood for each instance. \"\"\" neg_ll = lnvar_y + np . power ( y_true - y_pred , 2 ) / np . exp ( lnvar_y ) return np . nansum ( neg_ll , axis = 1 )","title":"np_compute_negative_log_likelihood()"},{"location":"reference/#sreftml.utilities.split_data_for_sreftml","text":"Split data for sreftml. Parameters: df ( DataFrame ) \u2013 Input DataFrame. name_biomarkers ( list [ str ] ) \u2013 List of biomarker names. name_covariates ( list [ str ] ) \u2013 List of covariate names. isMixedlm ( bool , default: True ) \u2013 Select whether to use a mixed-effects model when computing model_1 features. Default to True. Returns: tuple ( tuple [ DataFrame , DataFrame , DataFrame , DataFrame ] ) \u2013 A tuple containing the following arrays: - x (pd.DataFrame): Time values. - cov (pd.DataFrame): Covariate values. - m (pd.DataFrame): Slope and intercept from regression by biomarker. - y (pd.DataFrame): Biomarker values. sreftml\\utilities.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def split_data_for_sreftml ( df : pd . DataFrame , name_biomarkers : list [ str ], name_covariates : list [ str ], isMixedlm : bool = True , ) -> tuple [ pd . DataFrame , pd . DataFrame , pd . DataFrame , pd . DataFrame ]: \"\"\" Split data for sreftml. Args: df (pd.DataFrame): Input DataFrame. name_biomarkers (list[str]): List of biomarker names. name_covariates (list[str]): List of covariate names. isMixedlm (bool): Select whether to use a mixed-effects model when computing model_1 features. Default to True. Returns: tuple: A tuple containing the following arrays: - x (pd.DataFrame): Time values. - cov (pd.DataFrame): Covariate values. - m (pd.DataFrame): Slope and intercept from regression by biomarker. - y (pd.DataFrame): Biomarker values. \"\"\" df_ = df . copy () if len ( name_covariates ) > 0 and pd . isna ( df [ name_covariates ]) . any () . any (): warnings . warn ( \"Missing value imputation was performed for some covariates.\" ) df_ [ name_covariates ] = df_ [ name_covariates ] . fillna ( df . loc [:, name_covariates ] . mean () ) if isMixedlm : linreg , models = mixed_effect_linear_regression ( df_ , name_biomarkers ) if pd . isna ( linreg ) . any () . any (): warnings . warn ( \"Missing value imputation was performed for some features.\" ) prms = [ i . params [ 0 ] for i in models ] + [ i . params [ 1 ] for i in models ] labels = [ i + j for j in [ \"_intercept\" , \"_slope\" ] for i in name_biomarkers ] dict_slope = dict ( zip ( labels , prms )) linreg = linreg . fillna ( dict_slope ) else : linreg = linear_regression_each_subject ( df_ , name_biomarkers ) if pd . isna ( linreg ) . any () . any (): warnings . warn ( \"Missing value imputation was performed for some features.\" ) linreg = linreg . fillna ( linreg . mean ()) df_ = df_ . merge ( linreg ) x = df_ . TIME cov = df_ [ name_covariates ] m = df_ . loc [:, df_ . columns . str . contains ( \"_slope|_intercept\" )] y = df_ [ name_biomarkers ] return x , cov , m , y","title":"split_data_for_sreftml()"},{"location":"reference/#sreftml.utilities.tf_compute_negative_log_likelihood","text":"Computes the negative log likelihood between true and predicted values using tensorflow. Parameters: y_true ( ndarray ) \u2013 True target values. y_pred ( ndarray ) \u2013 Predicted target values. lnvar_y ( Variable ) \u2013 Natural logarithm of the variance. Returns: Tensor \u2013 tf.Tensor: The negative log likelihood for each instance. sreftml\\utilities.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def tf_compute_negative_log_likelihood ( y_true : np . ndarray , y_pred : np . ndarray , lnvar_y : tf . Variable ) -> tf . Tensor : \"\"\" Computes the negative log likelihood between true and predicted values using tensorflow. Args: y_true (np.ndarray): True target values. y_pred (np.ndarray): Predicted target values. lnvar_y (tf.Variable): Natural logarithm of the variance. Returns: tf.Tensor: The negative log likelihood for each instance. \"\"\" is_nan = tf . math . is_nan ( y_true ) y_true = tf . where ( is_nan , tf . zeros_like ( y_true ), y_true ) y_pred = tf . where ( is_nan , tf . zeros_like ( y_pred ), y_pred ) neg_ll = lnvar_y + tf . pow ( y_true - y_pred , 2 ) / tf . exp ( lnvar_y ) neg_ll = tf . where ( is_nan , tf . zeros_like ( neg_ll ), neg_ll ) return tf . reduce_sum ( neg_ll , axis = 1 )","title":"tf_compute_negative_log_likelihood()"}]}